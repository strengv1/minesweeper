{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Square = ({\n  handleClick,\n  id,\n  idx\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"square hidden \" + id,\n    onClick: () => handleClick(idx, id)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = Square;\nconst Grid = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: parts.map(part => /*#__PURE__*/_jsxDEV(Part, {\n      name: part.name,\n      exercises: part.exercises\n    }, part.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Grid;\nconst generateGrid = (width, height, handleClick) => {\n  let grid = [];\n  for (let i = 0; i < height; ++i) {\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`;\n      let idx = i * width + j;\n      grid.push( /*#__PURE__*/_jsxDEV(Square, {\n        handleClick: handleClick,\n        id: id,\n        idx: idx\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this));\n    }\n  }\n  return grid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMineField = (minesCount, gridLen) => {\n  if (minesCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let mineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < minesCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => mineField[idx] = true);\n  return mineField;\n};\nfunction App() {\n  _s();\n  const [width] = useState(3); // setWidth\n  const [height] = useState(4); // setHeight\n  const minesCount = 3;\n  const mineField = generateMineField(minesCount, width * height);\n  const handleClick = (idx, id) => {\n    var element = document.getElementsByClassName(id);\n    console.log('element.classList', element.classList);\n    // if (mineField[idx]) {\n    //   //end game\n    //   element.classList.remove('hidden')\n    //   element.classList.add('mine')\n    // } else {\n    //   // reveal number / empty\n    //   element.classList.remove('hidden')\n    //   element.classList.add('open')\n    // }\n  };\n\n  const grid = generateGrid(width, height, handleClick);\n  console.log('grid:', grid);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${width}, auto)`\n      },\n      children: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"fvV4ajy/cm+EWeOfWgCjH+H9I8o=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","handleClick","id","idx","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","Grid","children","parts","map","part","Part","name","exercises","_c2","generateGrid","width","height","grid","i","j","push","randInt","min","max","Math","floor","random","generateMineField","minesCount","gridLen","console","log","mineField","Array","fill","mineIndexes","length","randomNumber","includes","forEach","App","_s","element","document","getElementsByClassName","classList","style","gridTemplateColumns","_c3","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState } from 'react'\n\nconst Square = ({handleClick, id, idx}) => {\n  return (\n    <div className={\"square hidden \" + id} onClick={() => handleClick(idx, id)} />\n  )\n}\n\nconst Grid = () => {\n  return (\n    <div>\n      {parts.map(\n        part =>\n          <Part key={part.id} name={part.name} exercises={part.exercises} />\n      )}\n    </div>\n  )\n}\n\nconst generateGrid = (width, height, handleClick) => {\n  let grid = []\n\n  for (let i = 0; i < height; ++i){\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`\n      let idx = i*width + j\n      grid.push(<Square key={id} handleClick={ handleClick } id={id} idx={idx} />)\n    }\n  }\n  return grid\n}\n\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst generateMineField = (minesCount, gridLen) => {\n  if ( minesCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let mineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < minesCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => mineField[idx] = true)\n  return mineField\n}\n\nfunction App() {\n  const [width] = useState(3)   // setWidth\n  const [height] = useState(4)  // setHeight\n  const minesCount = 3\n\n  const mineField = generateMineField(minesCount, width*height)\n  \n  const handleClick = (idx, id) => {\n    var element = document.getElementsByClassName(id)\n    console.log('element.classList', element.classList)\n    // if (mineField[idx]) {\n    //   //end game\n    //   element.classList.remove('hidden')\n    //   element.classList.add('mine')\n    // } else {\n    //   // reveal number / empty\n    //   element.classList.remove('hidden')\n    //   element.classList.add('open')\n    // }\n  }\n  const grid = generateGrid(width, height, handleClick)\n  console.log('grid:', grid)\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n      </div>\n\n      \n\n      <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n        { grid }\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}