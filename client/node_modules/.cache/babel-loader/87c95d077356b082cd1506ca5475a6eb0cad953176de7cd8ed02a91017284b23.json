{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport Tile from './components/tile.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  grid,\n  width,\n  revealTile\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"grid\",\n  style: {\n    gridTemplateColumns: `repeat(${width}, auto)`\n  },\n  children: grid.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n    revealTile: revealTile,\n    tile: tile\n  }, tile.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = Grid;\nconst generateGrid = (width, height) => {\n  let newGrid = [];\n  for (let i = 0; i < height; ++i) {\n    for (let j = 0; j < width; ++j) {\n      const tile = {\n        id: `${i}_${j}`,\n        x: j,\n        y: i,\n        status: 'hidden'\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n// Returns a boolean array with length of gridLen, with 'mineCount' amount of trues \nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [/*mineField, */setMineField] = useState([]);\n  const [width, setWidth] = useState(4);\n  const [height, setHeight] = useState(5);\n  const [mineCount, setMineCount] = useState(3);\n  const createEmptyGrid = () => {\n    const newGrid = generateGrid(width, height);\n    setGrid(newGrid);\n    const newMineField = generateMineField(mineCount, width * height);\n    setMineField(newMineField);\n  };\n  const revealTile = tile => {\n    console.log('tile:', tile);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: e => setWidth(e.target.value),\n        type: \"text\",\n        id: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: height,\n        onChange: e => setHeight(e.target.value),\n        type: \"text\",\n        id: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          createEmptyGrid();\n        },\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      width: width,\n      revealTile: revealTile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"AR49yzj7RZsUG56krvD9HqCktjc=\");\n_c2 = App;\nexport default App;\n\n// const handleClick = (e) => {\n//   e.preventDefault()\n\n//   const checkForMine = () => {\n//     if (mineField[idx]) {\n//       //end game\n//       classList.add('mine')\n//     } else {\n//       // reveal number / empty\n//       classList.add('open')\n//     }\n//   }\n//   var square = e.target\n//   var classList = square.classList\n//   var idx = indexFromId(square.id, width)\n//   switch (true){\n//     // LEFT CLICK:\n//     case ((e.type === 'click') && classList.contains('hidden')):\n//       classList.remove('hidden')\n//       checkForMine()\n//       break\n//     // RIGHT CLICK:\n//     case ((e.type === 'contextmenu') && classList.contains('hidden')):\n//       classList.remove('hidden')\n//       classList.add('flag')\n//       break\n//     case ((e.type ==='contextmenu') && classList.contains('flag')):\n//       classList.remove('flag')\n//       classList.add('hidden')  \n//       break\n//     default:\n//       break\n//   }\n\n// }\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","useEffect","Tile","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","grid","width","revealTile","className","style","gridTemplateColumns","children","map","tile","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","generateGrid","height","newGrid","i","j","x","y","status","push","randInt","min","max","Math","floor","random","generateMineField","mineCount","gridLen","console","log","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","forEach","idx","App","_s","setGrid","setMineField","setWidth","setHeight","setMineCount","createEmptyGrid","htmlFor","value","onChange","e","target","type","onClick","_c2","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState, useEffect  } from 'react'\nimport Tile from './components/tile.js'\n\nconst Grid = ({ grid, width, revealTile }) => (\n  <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n    {grid.map( tile => \n      <Tile key={tile.id}\n        revealTile={ revealTile }\n        tile={tile} />\n    )}\n  </div>\n)\n\nconst generateGrid = (width, height) => {\n  let newGrid = []\n\n  for (let i = 0; i < height; ++i){\n    for (let j = 0; j < width; ++j) {\n      const tile = {\n        id: `${i}_${j}`,\n        x: j,\n        y: i,\n        status: 'hidden'\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n// Returns a boolean array with length of gridLen, with 'mineCount' amount of trues \nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nfunction App() {\n  const [grid, setGrid] = useState([])\n  const [/*mineField, */setMineField] = useState([])\n  const [width, setWidth] = useState(4)\n  const [height, setHeight] = useState(5)\n  const [mineCount, setMineCount] = useState(3)\n    \n  const createEmptyGrid = () => {\n    const newGrid = generateGrid(width, height)\n    setGrid(newGrid)\n    \n    const newMineField = generateMineField(mineCount, width*height)\n    setMineField(newMineField)\n  }\n\n  const revealTile = (tile) => {\n    console.log('tile:', tile)\n  }\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n        <label htmlFor=\"width\">width</label>\n        <input\n          value={width}\n          onChange={e => setWidth(e.target.value)}\n          type=\"text\"\n          id=\"width\"\n        />\n        <label htmlFor=\"height\">height</label>\n        <input\n          value={height}\n          onChange={e => setHeight(e.target.value)}\n          type=\"text\"\n          id=\"height\"/>\n        <button\n          onClick={(e) => {createEmptyGrid()}}\n          > New Game </button>\n      </div>\n\n      <Grid grid={grid} width={width} revealTile={revealTile}/>\n\n    </>\n  );\n}\n\nexport default App;\n\n\n\n\n\n  // const handleClick = (e) => {\n  //   e.preventDefault()\n    \n  //   const checkForMine = () => {\n  //     if (mineField[idx]) {\n  //       //end game\n  //       classList.add('mine')\n  //     } else {\n  //       // reveal number / empty\n  //       classList.add('open')\n  //     }\n  //   }\n  //   var square = e.target\n  //   var classList = square.classList\n  //   var idx = indexFromId(square.id, width)\n  //   switch (true){\n  //     // LEFT CLICK:\n  //     case ((e.type === 'click') && classList.contains('hidden')):\n  //       classList.remove('hidden')\n  //       checkForMine()\n  //       break\n  //     // RIGHT CLICK:\n  //     case ((e.type === 'contextmenu') && classList.contains('hidden')):\n  //       classList.remove('hidden')\n  //       classList.add('flag')\n  //       break\n  //     case ((e.type ==='contextmenu') && classList.contains('flag')):\n  //       classList.remove('flag')\n  //       classList.add('hidden')  \n  //       break\n  //     default:\n  //       break\n  //   }\n  \n  // }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}