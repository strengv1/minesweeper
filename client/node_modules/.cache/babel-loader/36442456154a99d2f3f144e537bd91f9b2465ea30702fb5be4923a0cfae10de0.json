{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport Grid from './components/grid.js';\nimport Timer from './components/timer.js';\nimport Header from './components/header.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = parseInt(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst getAdjacentTiles = (grid, tile, width) => {\n  const neighbors = [];\n  const {\n    x,\n    y\n  } = getXYfromIndex(tile.idx, width);\n  let ltop;\n  let top;\n  let rtop;\n\n  // for (let xOff = -1; xOff < 2; ++xOff){\n  //   for (let yOff = -1; yOff < 2; ++yOff){\n\n  //     const neighbor = grid[ tile.idx + xOff*width + yOff ]\n\n  //     if (neighbor) neighbors.push(neighbor)\n  //   } \n  // }\n  return neighbors;\n};\nconst addAdjacentMineNumbers = (grid, width) => {\n  for (let i = 0; i < grid.length; ++i) {\n    let tile = grid[i];\n    const neighbors = getAdjacentTiles(grid, tile, width);\n    console.log('neighbors:', neighbors);\n    for (let j = 0; j < neighbors.length; ++j) {\n      if (neighbors[j].isMine) tile.adjacentMines++;\n    }\n  }\n};\nconst addMinesToGrid = (grid, mineCount, firstTile) => {\n  if (mineCount > grid.length) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, grid.length);\n    if (!mineIndexes.includes(randomNumber) || randomNumber === firstTile.idx) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => grid[idx].isMine = true);\n};\nconst generateGrid = (wid, hgt) => {\n  let newGrid = [];\n  for (let i = 0; i < hgt; ++i) {\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid * i;\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nfunction App() {\n  _s();\n  const [firstClick, setFirstClick] = useState(true);\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(mineCount);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Memory leak preventation?\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid) {\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n      if (tile.isMine && tileIsOpened) return false;\n      if (!tile.isMine && !tileIsOpened) return false;\n    }\n    return true;\n  };\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false);\n    editableGrid.forEach(tile => {\n      if (!tile.isMine && tile.status === 'flag') {\n        tile.status = 'flag_incorrect';\n      }\n      if (tile.isMine && tile.status !== 'flag') {\n        tile.status = 'mine';\n      }\n      tile.disabled = true;\n    });\n    setGameOverText(text);\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    let neighbouringFlags = 0;\n    for (tile in neighbors) {\n      if (tile.status === 'flag') {\n        neighbouringFlags++;\n      }\n    }\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    for (tile in neighbors) {\n      if (tile.status === 'hidden') {\n        revealTile(tile);\n      }\n    }\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      let newGrid = [...grid];\n      addMinesToGrid(newGrid, mineCount, tile);\n      addAdjacentMineNumbers(newGrid, width);\n      setGrid(newGrid);\n      setTimerOn(true);\n      setFirstClick(false);\n    }\n    let newGrid = [...grid];\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!');\n      newGrid[tile.idx].status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open';\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      gameOver(newGrid, 'Congratulations!');\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        setMinesLeftText(prev => prev + 1);\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    setMinesLeftText(mineCount);\n    const newGrid = generateGrid(width, height);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--size', width);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      width: width,\n      height: height,\n      mineCount: mineCount,\n      functions: [setWidth, setHeight, setMineCount, initializeGrid]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        time: time,\n        minesLeft: minesLeftText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        functions: [revealTile, flagTile, checkFlagsAndRevealAdjacentTiles]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"cHp+usOzpGtLhgovSn7KmiWactQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Grid","Timer","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","getXYfromIndex","index","width","x","y","parseInt","getAdjacentTiles","grid","tile","neighbors","idx","ltop","top","rtop","addAdjacentMineNumbers","i","length","console","log","j","isMine","adjacentMines","addMinesToGrid","mineCount","firstTile","mineIndexes","randomNumber","randInt","includes","push","forEach","generateGrid","wid","hgt","newGrid","id","status","disabled","min","max","Math","floor","random","App","_s","firstClick","setFirstClick","height","setHeight","setWidth","setMineCount","setGrid","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","interval","setInterval","prevTime","clearInterval","checkForWin","tileIsOpened","gameOver","editableGrid","text","checkFlagsAndRevealAdjacentTiles","neighbouringFlags","revealAdjacentHiddenTiles","revealTile","flagTile","prev","initializeGrid","board","document","querySelector","style","setProperty","children","functions","fileName","_jsxFileName","lineNumber","columnNumber","className","minesLeft","_c","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState, useEffect  } from 'react'\nimport Grid from './components/grid.js'\nimport Timer from './components/timer.js'\nimport Header from './components/header.js'\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = parseInt(index/width)\n  return { x, y }\n}\n\nconst getAdjacentTiles = (grid, tile, width)  => {\n  const neighbors = []\n\n  const {x, y} = getXYfromIndex(tile.idx, width)\n\n  \n  let ltop\n  let top\n  let rtop\n\n  // for (let xOff = -1; xOff < 2; ++xOff){\n  //   for (let yOff = -1; yOff < 2; ++yOff){\n\n  //     const neighbor = grid[ tile.idx + xOff*width + yOff ]\n\n  //     if (neighbor) neighbors.push(neighbor)\n  //   } \n  // }\n  return neighbors\n}\nconst addAdjacentMineNumbers = (grid, width) => {\n  for (let i = 0; i<grid.length; ++i){\n    let tile = grid[i]\n    const neighbors = getAdjacentTiles(grid, tile, width)\n\n    console.log('neighbors:', neighbors)\n    for (let j = 0; j<neighbors.length; ++j) {\n      if (neighbors[j].isMine) tile.adjacentMines++\n    }\n\n  }\n}\nconst addMinesToGrid = (grid, mineCount, firstTile) => {\n  if ( mineCount > grid.length ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let mineIndexes = []\n\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, grid.length)\n    if (!mineIndexes.includes(randomNumber) || randomNumber===firstTile.idx) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => grid[idx].isMine = true)\n}\nconst generateGrid = (wid, hgt) => {\n  let newGrid = []\n  for (let i = 0; i < hgt; ++i){\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid*i\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false,\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction App() {\n  const [firstClick, setFirstClick] = useState(true)\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(mineCount)\n\n  useEffect(() => {\n    let interval = null\n    \n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval) // Memory leak preventation?\n  }, [timerOn]);\n\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid){\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n      if (tile.isMine && tileIsOpened) return false\n      if (!tile.isMine && !tileIsOpened) return false\n    }\n    return true\n  }\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false)\n    editableGrid.forEach( (tile) => {\n      if ( !tile.isMine && tile.status === 'flag') {\n        tile.status = 'flag_incorrect'\n      }\n      if ( tile.isMine && tile.status !== 'flag') {\n        tile.status = 'mine'\n      }\n      \n      tile.disabled = true\n    })\n    setGameOverText(text)\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    let neighbouringFlags = 0\n    \n    for (tile in neighbors) {\n      if (tile.status === 'flag'){\n        neighbouringFlags++\n      }\n    }\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    for (tile in neighbors){\n      if (tile.status === 'hidden'){\n        revealTile(tile)\n      }\n    }\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      let newGrid = [...grid]\n      addMinesToGrid(newGrid, mineCount, tile) \n\n      addAdjacentMineNumbers(newGrid, width)\n      setGrid(newGrid)\n\n      setTimerOn(true)\n      setFirstClick(false)\n    }\n    let newGrid = [...grid]\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!')\n      newGrid[tile.idx].status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open'\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      gameOver(newGrid, 'Congratulations!')\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        setMinesLeftText(prev => prev + 1)\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0) \n    setFirstClick(true)\n    setGameOverText('')\n    setMinesLeftText(mineCount)\n    \n    const newGrid = generateGrid(width, height)\n    \n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--size', width)\n    }\n  }\n  \n  return (\n    <>\n      <Header \n        width={width} height={height} mineCount={mineCount}\n        functions={[\n            setWidth,\n            setHeight,\n            setMineCount,\n            initializeGrid\n          ]}\n      />     \n\n      <div className=\"body\">\n        <Timer time={time} minesLeft={minesLeftText} />\n\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            functions={\n              [ revealTile, \n                flagTile, \n                checkFlagsAndRevealAdjacentTiles ]}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}