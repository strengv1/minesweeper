{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport Tile from './components/tile.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  grid,\n  width,\n  revealTile,\n  flagTile\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"grid\",\n  style: {\n    gridTemplateColumns: `repeat(${width}, auto)`\n  },\n  children: grid.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n    revealTile: revealTile,\n    flagTile: flagTile,\n    tile: tile\n  }, tile.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = Grid;\nconst openAdjacentEmptyTiles = (tile, width, height) => {\n  const adjacentTiles = getAdjacentIndexes(tile.x, tile.y, tile.idx, width, height);\n  console.log('non-empty adjacentTiles:', adjacentTiles);\n  const emptyTiles = adjacentTiles.filter(tile => {\n    return tile.adjacentMines === 0;\n  });\n  console.log('empty adjacentTiles:', adjacentTiles);\n};\nconst getAdjacentIndexes = (x, y, idx, width, height) => {\n  const topL = idx - (width + 1);\n  const top = idx - width;\n  const topR = idx - (width - 1);\n  const L = idx - 1;\n  const R = idx + 1;\n  const botL = idx + (width - 1);\n  const bot = idx + width;\n  const botR = idx + (width + 1);\n  const neighborIndexes = [];\n  if (x === 0) {\n    if (y === 0) {\n      neighborIndexes.push(R, bot, botR); // left top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(R, top, topR); // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR); // left side\n    }\n  } else if (x === width - 1) {\n    if (y === 0) {\n      neighborIndexes.push(L, bot, botL); // right top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(L, top, topL); // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL); // right side\n    }\n  } else if (y === 0) {\n    neighborIndexes.push(L, botL, bot, botR, R); // top\n  } else if (y === height - 1) {\n    neighborIndexes.push(L, topL, top, topR, R); // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR); // middle\n  }\n\n  return neighborIndexes;\n};\nconst getAdjacentMineCount = (x, y, idx, mineField, width, height) => {\n  let count = 0;\n  if (mineField[idx]) return 0;\n  const neighborIndexes = getAdjacentIndexes(x, y, idx, width, height);\n  neighborIndexes.forEach(idx => {\n    if (mineField[idx]) {\n      count++;\n    }\n  });\n  return count > 0 ? count : 0;\n};\nconst generateGrid = (width, height, mineField) => {\n  let newGrid = [];\n  console.log('width, height, mineField:', width, height, mineField);\n  for (let i = 0; i < height; ++i) {\n    for (let j = 0; j < width; ++j) {\n      const idx = j + width * i;\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        x: j,\n        y: i,\n        status: 'hidden',\n        adjacentMines: getAdjacentMineCount(j, i, idx, mineField, width, height)\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [mineField, setMineField] = useState([]);\n  const [width, setWidth] = useState(9);\n  const [height, setHeight] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [gameOverText, setGameOverText] = useState('');\n  const initializeBoard = () => {\n    setGameOverText('');\n    const newMineField = generateMineField(mineCount, width * height);\n    setMineField(newMineField);\n    let newGrid = generateGrid(width, height, newMineField);\n    setGrid(newGrid);\n  };\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid) {\n      const tileHasMine = mineField[tile.idx];\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n      if (tileHasMine && tileIsOpened) return false;\n      if (!tileHasMine && !tileIsOpened) return false;\n    }\n    return true;\n  };\n\n  // Call this when game is won:\n  // 1. Mark flagged mines as correct\n  // 2. Disable all tiles\n  const win = editableGrid => {\n    editableGrid.forEach(tile => {\n      if (tile.status.includes('disabled')) return;\n      if (mineField[tile.idx]) {\n        tile.status = 'correct';\n      }\n      tile.status = tile.status + ' disabled';\n    });\n    setGameOverText('Congratulations!');\n  };\n  // Call when game is lost\n  // 1. Mark correct flags as correct\n  // 2. Mark wrong flags as wrong (TODO)\n  // 3. Reveal all mines\n  // 3. Disable all tiles\n  const gameOver = editableGrid => {\n    editableGrid.forEach(tile => {\n      if (tile.status.includes('disabled')) return;\n      if (mineField[tile.idx]) {\n        tile.status = tile.status === 'flag' ? 'correct' : 'mine';\n      }\n      tile.status = tile.status + ' disabled';\n    });\n    setGameOverText('Game over!');\n  };\n  const revealTile = tile => {\n    let newGrid = [...grid];\n    if (mineField[tile.idx]) {\n      // GAME OVER :()\n      gameOver(newGrid, 'Game Over!');\n    } else {\n      // reveal number / empty tile\n      if (newGrid[tile.idx].adjacentMines === 0) {\n        console.log('empty tile :)');\n        openAdjacentEmptyTiles(tile, width, height);\n      }\n      newGrid[tile.idx].status = 'open';\n      setGrid(newGrid);\n    }\n    if (checkForWin()) {\n      win(newGrid);\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        setGrid(newGrid);\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        setGrid(newGrid);\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: e => setWidth(e.target.value),\n        type: \"text\",\n        id: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: height,\n        onChange: e => setHeight(e.target.value),\n        type: \"text\",\n        id: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"mineCount\",\n        children: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: mineCount,\n        onChange: e => setMineCount(e.target.value),\n        type: \"text\",\n        id: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          initializeBoard();\n        },\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        width: width,\n        revealTile: revealTile,\n        flagTile: flagTile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"nyAPrf5pFhmIklMQkcpJHOmD8i8=\");\n_c2 = App;\nexport default App;\n\n// const handleClick = (e) => {\n//   e.preventDefault()\n\n//   const checkForMine = () => {\n//     if (mineField[idx]) {\n//       //end game\n//       classList.add('mine')\n//     } else {\n//       // reveal number / empty\n//       classList.add('open')\n//     }\n//   }\n//   var square = e.target\n//   var classList = square.classList\n//   var idx = indexFromId(square.id, width)\n//   switch (true){\n//     // LEFT CLICK:\n//     case ((e.type === 'click') && classList.contains('hidden')):\n//       classList.remove('hidden')\n//       checkForMine()\n//       break\n//     // RIGHT CLICK:\n//     case ((e.type === 'contextmenu') && classList.contains('hidden')):\n//       classList.remove('hidden')\n//       classList.add('flag')\n//       break\n//     case ((e.type ==='contextmenu') && classList.contains('flag')):\n//       classList.remove('flag')\n//       classList.add('hidden')  \n//       break\n//     default:\n//       break\n//   }\n\n// }\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","Tile","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","grid","width","revealTile","flagTile","className","style","gridTemplateColumns","children","map","tile","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","openAdjacentEmptyTiles","height","adjacentTiles","getAdjacentIndexes","x","y","idx","console","log","emptyTiles","filter","adjacentMines","topL","top","topR","L","R","botL","bot","botR","neighborIndexes","push","getAdjacentMineCount","mineField","count","forEach","generateGrid","newGrid","i","j","status","randInt","min","max","Math","floor","random","generateMineField","mineCount","gridLen","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","App","_s","setGrid","setMineField","setWidth","setHeight","setMineCount","gameOverText","setGameOverText","initializeBoard","checkForWin","tileHasMine","tileIsOpened","win","editableGrid","gameOver","htmlFor","value","onChange","e","target","type","onClick","_c2","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState  } from 'react'\nimport Tile from './components/tile.js'\n\nconst Grid = ({ grid, width, revealTile, flagTile }) => (\n  <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n    {grid.map( tile =>\n      <Tile \n        key={tile.id}\n        revealTile={ revealTile }\n        flagTile={flagTile}\n        tile={tile} />\n    )}\n  </div>\n)\nconst openAdjacentEmptyTiles = (tile, width, height) => {\n  const adjacentTiles = getAdjacentIndexes(tile.x, tile.y, tile.idx, width, height)\n  console.log('non-empty adjacentTiles:', adjacentTiles)\n  const emptyTiles = adjacentTiles.filter((tile) => {\n    return tile.adjacentMines === 0\n  })\n\n  console.log('empty adjacentTiles:', adjacentTiles)\n}\nconst getAdjacentIndexes = (x, y, idx, width, height) => {\n  const topL = idx - (width+1)\n  const top = idx - width\n  const topR = idx - (width-1)\n  const L = idx - 1\n  const R = idx + 1\n  const botL = idx + (width-1)\n  const bot= idx + width\n  const botR = idx + (width+1)\n  const neighborIndexes = []\n\n  if (x === 0){\n    if (y === 0){\n      neighborIndexes.push(R, bot, botR)     // left top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(R, top, topR)     // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR)   // left side\n    }\n  } else if (x === width - 1){\n    if (y === 0){\n      neighborIndexes.push(L, bot, botL)    // right top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(L, top, topL)    // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL)   // right side\n    }\n  } else if (y === 0){\n    neighborIndexes.push(L, botL, bot, botR, R)   // top\n  } else if (y === height - 1){\n    neighborIndexes.push(L, topL, top, topR, R)   // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR)    // middle\n  }\n\n  return neighborIndexes\n}\nconst getAdjacentMineCount = (x, y, idx, mineField, width, height) => {\n  let count = 0\n  if (mineField[idx]) return 0\n\n  const neighborIndexes = getAdjacentIndexes(x, y, idx, width, height)\n\n  neighborIndexes.forEach((idx) => {\n    if (mineField[idx]) {\n      count++\n    }\n  })\n  return (count > 0) ? count : 0\n}\nconst generateGrid = (width, height, mineField) => {\n  let newGrid = []\n  console.log('width, height, mineField:',width, height, mineField)\n  for (let i = 0; i < height; ++i){\n    for (let j = 0; j < width; ++j) {\n      const idx = j + width*i\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        x: j,\n        y: i,\n        status: 'hidden',\n        adjacentMines: getAdjacentMineCount(j, i, idx, mineField, width, height)\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n} \nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nfunction App() {\n  const [grid, setGrid] = useState([])\n  const [mineField, setMineField] = useState([])\n  const [width, setWidth] = useState(9)\n  const [height, setHeight] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [gameOverText, setGameOverText] = useState('') \n\n  const initializeBoard = () => {\n    setGameOverText('')\n    \n    const newMineField = generateMineField(mineCount, width*height)\n    setMineField(newMineField)\n\n    let newGrid = generateGrid(width, height, newMineField)\n    setGrid(newGrid)\n  }\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid){\n      const tileHasMine = mineField[tile.idx]\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n      if (tileHasMine && tileIsOpened) return false\n      if (!tileHasMine && !tileIsOpened) return false\n    }\n    return true\n  }\n\n  // Call this when game is won:\n  // 1. Mark flagged mines as correct\n  // 2. Disable all tiles\n  const win = (editableGrid) => {\n    editableGrid.forEach( (tile) => {\n      if (tile.status.includes('disabled') ) return\n\n      if ( mineField[tile.idx] ) {\n        tile.status = 'correct' \n      }\n      tile.status = tile.status + ' disabled'\n    })\n    setGameOverText('Congratulations!')\n  }\n  // Call when game is lost\n  // 1. Mark correct flags as correct\n  // 2. Mark wrong flags as wrong (TODO)\n  // 3. Reveal all mines\n  // 3. Disable all tiles\n  const gameOver = (editableGrid) => {\n    editableGrid.forEach( (tile) => {\n      if (tile.status.includes('disabled') ) return\n\n      if ( mineField[tile.idx] ) {\n        tile.status = (tile.status === 'flag') ?\n        'correct' : 'mine'\n      }\n      tile.status = tile.status + ' disabled'\n    })\n    setGameOverText('Game over!')\n  }\n\n  const revealTile = (tile) => {\n    let newGrid = [...grid]\n    if (mineField[tile.idx]) {\n      // GAME OVER :()\n      gameOver(newGrid, 'Game Over!')\n    } else {\n      // reveal number / empty tile\n      if (newGrid[tile.idx].adjacentMines === 0){\n        console.log('empty tile :)')\n        openAdjacentEmptyTiles(tile, width, height)\n      }\n\n      newGrid[tile.idx].status = 'open'\n      setGrid(newGrid)\n    }\n\n    if (checkForWin()){\n      win(newGrid)\n    }\n  }\n  \n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        setGrid(newGrid)\n        break\n\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        setGrid(newGrid)\n        break\n      default:\n        break\n    }\n    \n  }\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n        <label htmlFor=\"width\">width</label>\n        <input\n          value={width}\n          onChange={e => setWidth(e.target.value)}\n          type=\"text\"\n          id=\"width\"\n        />\n        <label htmlFor=\"height\">height</label>\n        <input\n          value={height}\n          onChange={e => setHeight(e.target.value)}\n          type=\"text\"\n          id=\"height\"/>\n        <label htmlFor=\"mineCount\">mineCount</label>\n        <input\n          value={mineCount}\n          onChange={e => setMineCount(e.target.value)}\n          type=\"text\"\n          id=\"mineCount\"/>\n        <button\n          onClick={(e) => {initializeBoard()}}\n          > New Game </button>\n      </div>\n      <div className=\"body\">\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid \n            grid={grid} \n            width={width} \n            revealTile={revealTile}\n            flagTile={flagTile}\n          />\n      </div>\n\n      \n\n    </>\n  );\n}\n\nexport default App;\n\n\n\n\n\n  // const handleClick = (e) => {\n  //   e.preventDefault()\n    \n  //   const checkForMine = () => {\n  //     if (mineField[idx]) {\n  //       //end game\n  //       classList.add('mine')\n  //     } else {\n  //       // reveal number / empty\n  //       classList.add('open')\n  //     }\n  //   }\n  //   var square = e.target\n  //   var classList = square.classList\n  //   var idx = indexFromId(square.id, width)\n  //   switch (true){\n  //     // LEFT CLICK:\n  //     case ((e.type === 'click') && classList.contains('hidden')):\n  //       classList.remove('hidden')\n  //       checkForMine()\n  //       break\n  //     // RIGHT CLICK:\n  //     case ((e.type === 'contextmenu') && classList.contains('hidden')):\n  //       classList.remove('hidden')\n  //       classList.add('flag')\n  //       break\n  //     case ((e.type ==='contextmenu') && classList.contains('flag')):\n  //       classList.remove('flag')\n  //       classList.add('hidden')  \n  //       break\n  //     default:\n  //       break\n  //   }\n  \n  // }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}