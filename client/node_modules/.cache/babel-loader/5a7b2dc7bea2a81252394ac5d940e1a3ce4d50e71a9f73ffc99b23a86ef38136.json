{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport Tile from './components/tile.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  grid,\n  width,\n  revealTile,\n  flagTile,\n  checkIfTileIsClear\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      gridTemplateColumns: `repeat(${width}, auto)`\n    },\n    children: grid.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n      tile: tile,\n      revealTile: revealTile,\n      flagTile: flagTile,\n      checkIfTileIsClear: checkIfTileIsClear\n    }, tile.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n};\n_c = Grid;\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = Math.floor(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst getAdjacentTileIndexes = (idx, width, height) => {\n  const {\n    x,\n    y\n  } = getXYfromIndex(idx, width);\n  const topL = idx - (width + 1);\n  const top = idx - width;\n  const topR = idx - (width - 1);\n  const L = idx - 1;\n  const R = idx + 1;\n  const botL = idx + (width - 1);\n  const bot = idx + width;\n  const botR = idx + (width + 1);\n  const neighborIndexes = [];\n  if (x === 0) {\n    if (y === 0) {\n      neighborIndexes.push(R, bot, botR); // left top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(R, top, topR); // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR); // left side\n    }\n  } else if (x === width - 1) {\n    if (y === 0) {\n      neighborIndexes.push(L, bot, botL); // right top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(L, top, topL); // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL); // right side\n    }\n  } else if (y === 0) {\n    neighborIndexes.push(L, botL, bot, botR, R); // top\n  } else if (y === height - 1) {\n    neighborIndexes.push(L, topL, top, topR, R); // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR); // middle\n  }\n\n  return neighborIndexes;\n};\nconst getAdjacentMineCount = (idx, mineField, width, height) => {\n  let count = 0;\n  if (mineField[idx]) return 0;\n  const neighborIndexes = getAdjacentTileIndexes(idx, width, height);\n  neighborIndexes.forEach(idx => {\n    if (mineField[idx]) {\n      count++;\n    }\n  });\n  return count > 0 ? count : null;\n};\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = [];\n  for (let i = 0; i < hgt; ++i) {\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid * i;\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        adjacentMines: getAdjacentMineCount(idx, mineField, wid, hgt)\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nfunction App() {\n  _s();\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([]);\n  const [mineField, setMineField] = useState([]);\n  const [gameOverText, setGameOverText] = useState('');\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid) {\n      const tileHasMine = mineField[tile.idx];\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n      if (tileHasMine && tileIsOpened) return false;\n      if (!tileHasMine && !tileIsOpened) return false;\n    }\n    return true;\n  };\n\n  // Call this when game is won:\n  // 1. Mark flagged mines as correct\n  // 2. Disable all tiles\n  const win = editableGrid => {\n    editableGrid.forEach(tile => {\n      if (tile.status.includes('disabled')) return;\n      if (mineField[tile.idx]) {\n        tile.status = 'correct';\n      }\n      tile.status = tile.status + ' disabled';\n    });\n    setGameOverText('Congratulations!');\n  };\n  // Call when game is lost\n  // 1. Mark correct flags as correct\n  // 2. Mark wrong flags as wrong (TODO)\n  // 3. Reveal all mines\n  // 3. Disable all tiles\n  const gameOver = editableGrid => {\n    editableGrid.forEach(tile => {\n      if (tile.status.includes('disabled')) return;\n      if (mineField[tile.idx]) {\n        tile.status = tile.status === 'flag' ? 'correct' : 'mine';\n      }\n      tile.status = tile.status + ' disabled';\n    });\n    setGameOverText('Game over!');\n  };\n  const checkIfTileIsClear = tile => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height);\n    let neighbouringFlags = 0;\n    neighbors.forEach(idx => {\n      const tile = grid[idx];\n      if (tile.status === 'flag') {\n        neighbouringFlags++;\n      }\n    });\n    console.log('neighbouringFlags===tile.adjacentMines', neighbouringFlags === tile.adjacentMines);\n    return neighbouringFlags === tile.adjacentMines;\n  };\n  // 1. Get neighbors\n  // 2. Call revealTile for each hidden neighbor\n  const revealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height);\n    neighbors.forEach(idx => {\n      const tile = grid[idx];\n      if (tile.status === 'hidden') {\n        revealTile(tile);\n      }\n    });\n  };\n  const revealTile = tile => {\n    console.log(tile);\n    let newGrid = [...grid];\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid, 'Game Over!');\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open';\n      if (!tile.adjacentMines) {\n        revealAdjacentTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      win(newGrid);\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setGameOverText('');\n    const newMineField = generateMineField(mineCount, width * height);\n    const newGrid = generateGrid(width, height, newMineField);\n    setMineField(newMineField);\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: e => setWidth(Number(e.target.value)),\n        type: \"text\",\n        id: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: height,\n        onChange: e => setHeight(Number(e.target.value)),\n        type: \"text\",\n        id: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"mineCount\",\n        children: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: mineCount,\n        onChange: e => setMineCount(Number(e.target.value)),\n        type: \"text\",\n        id: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: initializeGrid,\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        width: width,\n        revealTile: revealTile,\n        flagTile: flagTile,\n        checkIfTileIsClear: checkIfTileIsClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"x621MqJdx+Pz/ttSxFCdtzOWyV0=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","Tile","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","grid","width","revealTile","flagTile","checkIfTileIsClear","className","style","gridTemplateColumns","children","map","tile","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","getXYfromIndex","index","x","y","Math","floor","getAdjacentTileIndexes","idx","height","topL","top","topR","L","R","botL","bot","botR","neighborIndexes","push","getAdjacentMineCount","mineField","count","forEach","generateGrid","wid","hgt","newGrid","i","j","status","adjacentMines","randInt","min","max","random","generateMineField","mineCount","gridLen","console","log","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","App","_s","setHeight","setWidth","setMineCount","setGrid","setMineField","gameOverText","setGameOverText","checkForWin","tileHasMine","tileIsOpened","win","editableGrid","gameOver","neighbors","neighbouringFlags","revealAdjacentTiles","initializeGrid","htmlFor","value","onChange","e","Number","target","type","onClick","_c2","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState  } from 'react'\nimport Tile from './components/tile.js'\n\nconst Grid = ({ grid, width, revealTile, flagTile, checkIfTileIsClear }) => {\n  return (\n  <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n    {grid.map( tile =>\n      <Tile \n        key={tile.id}\n        tile={tile} \n        revealTile={ revealTile }\n        flagTile={flagTile}\n        checkIfTileIsClear={checkIfTileIsClear}\n        />\n    )}\n  </div>\n)}\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = Math.floor(index/width)\n  return { x, y }\n}\nconst getAdjacentTileIndexes = (idx, width, height)  => {\n  const { x, y } = getXYfromIndex(idx, width)\n  \n  const topL = idx - (width + 1)\n  const top = idx - width\n  const topR = idx - (width - 1)\n  const L = idx - 1\n  const R = idx + 1\n  const botL = idx + (width - 1)\n  const bot= idx + width\n  const botR = idx + (width + 1)\n  const neighborIndexes = []\n  \n  if (x === 0){\n    if (y === 0){\n      neighborIndexes.push(R, bot, botR)     // left top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(R, top, topR)     // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR)   // left side\n    }\n  } else if (x === width - 1){\n    if (y === 0){\n      neighborIndexes.push(L, bot, botL)    // right top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(L, top, topL)    // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL)   // right side\n    }\n  } else if (y === 0){\n    neighborIndexes.push(L, botL, bot, botR, R)   // top\n  } else if (y === height - 1){\n    neighborIndexes.push(L, topL, top, topR, R)   // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR)    // middle\n  }\n\n  return neighborIndexes\n}\nconst getAdjacentMineCount = (idx, mineField, width, height) => {\n  let count = 0\n  if (mineField[idx]) return 0\n\n  const neighborIndexes = getAdjacentTileIndexes(idx, width, height)\n\n  neighborIndexes.forEach((idx) => {\n    if (mineField[idx]) {\n      count++\n    }\n  })\n\n  return (count > 0) ? count : null\n}\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = []\n  for (let i = 0; i < hgt; ++i){\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid*i\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        adjacentMines: getAdjacentMineCount(idx, mineField, wid, hgt)\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nfunction App() {\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([])\n  const [mineField, setMineField] = useState([])\n  const [gameOverText, setGameOverText] = useState('')\n  \n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid){\n      const tileHasMine = mineField[tile.idx]\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n      if (tileHasMine && tileIsOpened) return false\n      if (!tileHasMine && !tileIsOpened) return false\n    }\n    return true\n  }\n\n  // Call this when game is won:\n  // 1. Mark flagged mines as correct\n  // 2. Disable all tiles\n  const win = (editableGrid) => {\n    editableGrid.forEach( (tile) => {\n      if (tile.status.includes('disabled') ) return\n\n      if ( mineField[tile.idx] ) {\n        tile.status = 'correct' \n      }\n      tile.status = tile.status + ' disabled'\n    })\n    setGameOverText('Congratulations!')\n  }\n  // Call when game is lost\n  // 1. Mark correct flags as correct\n  // 2. Mark wrong flags as wrong (TODO)\n  // 3. Reveal all mines\n  // 3. Disable all tiles\n  const gameOver = (editableGrid) => {\n    editableGrid.forEach( (tile) => {\n      if (tile.status.includes('disabled') ) return\n\n      if ( mineField[tile.idx] ) {\n        tile.status = (tile.status === 'flag') ?\n        'correct' : 'mine'\n      }\n      tile.status = tile.status + ' disabled'\n    })\n    setGameOverText('Game over!')\n  }\n\n  const checkIfTileIsClear = (tile) => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height)\n    let neighbouringFlags = 0\n    \n    neighbors.forEach((idx) => {\n      const tile = grid[idx]\n      if (tile.status === 'flag'){\n        neighbouringFlags++\n      }\n    })\n    console.log('neighbouringFlags===tile.adjacentMines', neighbouringFlags===tile.adjacentMines)\n    return neighbouringFlags===tile.adjacentMines\n  }\n  // 1. Get neighbors\n  // 2. Call revealTile for each hidden neighbor\n  const revealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height)\n    neighbors.forEach((idx) => {\n      const tile = grid[idx]\n      if (tile.status === 'hidden'){\n        revealTile(tile)\n      }\n    })\n  }\n  const revealTile = (tile) => {\n    console.log(tile)\n    let newGrid = [...grid]\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid, 'Game Over!')\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open'\n      if (!tile.adjacentMines) {\n        revealAdjacentTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      win(newGrid)\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        break\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n    \n  }\n\n  const initializeGrid = () => {\n    setGameOverText('')\n    const newMineField = generateMineField(mineCount, width*height)\n    const newGrid = generateGrid(width, height, newMineField)\n    setMineField(newMineField)\n    setGrid(newGrid)\n  }\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n\n        <label htmlFor=\"width\">width</label>\n        <input\n          value={width}\n          onChange={e => setWidth(Number(e.target.value))}\n          type=\"text\"\n          id=\"width\"/>\n\n        <label htmlFor=\"height\">height</label>\n        <input\n          value={height}\n          onChange={e => setHeight(Number(e.target.value))}\n          type=\"text\"\n          id=\"height\"/>\n\n        <label htmlFor=\"mineCount\">mineCount</label>\n        <input\n          value={mineCount}\n          onChange={e => setMineCount(Number(e.target.value))}\n          type=\"text\"\n          id=\"mineCount\"/>\n\n        <button\n          onClick={initializeGrid}\n          > New Game </button>\n      </div>\n\n\n      <div className=\"body\">\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            width={width}\n            revealTile={revealTile}\n            flagTile={flagTile}\n            checkIfTileIsClear={checkIfTileIsClear}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}