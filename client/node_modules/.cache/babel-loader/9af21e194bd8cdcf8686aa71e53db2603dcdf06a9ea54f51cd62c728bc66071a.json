{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport Grid from './components/grid.js';\nimport Timer from './components/timer.js';\nimport Header from './components/header.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = Math.floor(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst getAdjacentTiles = (idx, width) => {\n  const {\n    x,\n    y\n  } = getXYfromIndex(idx, width);\n  const neighbors = [];\n  for (let xOff = -1; xOff < 2; ++xOff) {\n    for (let yOff = -1; yOff < 2; ++yOff) {}\n  }\n  // const topL = idx - (width + 1)\n  // const top = idx - width\n  // const topR = idx - (width - 1)\n  // const L = idx - 1\n  // const R = idx + 1\n  // const botL = idx + (width - 1)\n  // const bot= idx + width\n  // const botR = idx + (width + 1)\n  // const neighborIndexes = []\n\n  // if (x === 0){\n  //   if (y === 0){\n  //     neighborIndexes.push(R, bot, botR)     // left top corner\n  //   } else if (y === height - 1){\n  //     neighborIndexes.push(R, top, topR)     // left bot corner\n  //   } else {\n  //     neighborIndexes.push(top, topR, R, bot, botR)   // left side\n  //   }\n  // } else if (x === width - 1){\n  //   if (y === 0){\n  //     neighborIndexes.push(L, bot, botL)    // right top corner\n  //   } else if (y === height - 1){\n  //     neighborIndexes.push(L, top, topL)    // right bot corner\n  //   } else {\n  //     neighborIndexes.push(top, topL, L, bot, botL)   // right side\n  //   }\n  // } else if (y === 0){\n  //   neighborIndexes.push(L, botL, bot, botR, R)   // top\n  // } else if (y === height - 1){\n  //   neighborIndexes.push(L, topL, top, topR, R)   // bot\n  // } else {\n  //   neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR)    // middle\n  // }\n\n  return neighbors;\n};\nconst getAdjacentMineCount = (idx, mineField, width, height) => {\n  let count = 0;\n  if (mineField[idx]) return 0;\n  const neighborIndexes = getAdjacentTileIndexes(idx, width, height);\n  neighborIndexes.forEach(idx => {\n    if (mineField[idx]) {\n      count++;\n    }\n  });\n  return count > 0 ? count : null;\n};\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = [];\n  for (let i = 0; i < hgt; ++i) {\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid * i;\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: getAdjacentMineCount(idx, mineField, wid, hgt)\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nfunction App() {\n  _s();\n  const [firstClick, setFirstClick] = useState(true);\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([]);\n  const [mineField, setMineField] = useState([]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(mineCount);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Memory leak preventation?\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid) {\n      const tileHasMine = mineField[tile.idx];\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n      if (tileHasMine && tileIsOpened) return false;\n      if (!tileHasMine && !tileIsOpened) return false;\n    }\n    return true;\n  };\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false);\n    editableGrid.forEach(tile => {\n      if (!mineField[tile.idx] && tile.status === 'flag') {\n        tile.status = 'flag_incorrect';\n      }\n      if (mineField[tile.idx] && tile.status !== 'flag') {\n        tile.status = 'mine';\n      }\n      tile.disabled = true;\n    });\n    setGameOverText(text);\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height);\n    let neighbouringFlags = 0;\n    neighbors.forEach(idx => {\n      const tile = grid[idx];\n      if (tile.status === 'flag') {\n        neighbouringFlags++;\n      }\n    });\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height);\n    neighbors.forEach(idx => {\n      const tile = grid[idx];\n      if (tile.status === 'hidden') {\n        revealTile(tile);\n      }\n    });\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      setTimerOn(true);\n      setFirstClick(false);\n    }\n    let newGrid = [...grid];\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid, 'Game over!');\n      tile.status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open';\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      gameOver(newGrid, 'Congratulations!');\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        setMinesLeftText(prev => prev + 1);\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    setMinesLeftText(mineCount);\n    const newMineField = generateMineField(mineCount, width * height);\n    const newGrid = generateGrid(width, height, newMineField);\n    setMineField(newMineField);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--size', width);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      width: width,\n      height: height,\n      mineCount: mineCount,\n      functions: [setWidth, setHeight, setMineCount, initializeGrid]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        time: time,\n        minesLeft: minesLeftText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        functions: [revealTile, flagTile, checkFlagsAndRevealAdjacentTiles]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"RZFgPw7QxrYha1fz/Bh10dzuJHY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Grid","Timer","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","getXYfromIndex","index","width","x","y","Math","floor","getAdjacentTiles","idx","neighbors","xOff","yOff","getAdjacentMineCount","mineField","height","count","neighborIndexes","getAdjacentTileIndexes","forEach","generateGrid","wid","hgt","newGrid","i","j","tile","id","status","disabled","adjacentMines","push","randInt","min","max","random","generateMineField","mineCount","gridLen","console","log","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","App","_s","firstClick","setFirstClick","setHeight","setWidth","setMineCount","grid","setGrid","setMineField","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","interval","setInterval","prevTime","clearInterval","checkForWin","tileHasMine","tileIsOpened","gameOver","editableGrid","text","checkFlagsAndRevealAdjacentTiles","neighbouringFlags","revealAdjacentHiddenTiles","revealTile","flagTile","prev","initializeGrid","board","document","querySelector","style","setProperty","children","functions","fileName","_jsxFileName","lineNumber","columnNumber","className","minesLeft","_c","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState, useEffect  } from 'react'\nimport Grid from './components/grid.js'\nimport Timer from './components/timer.js'\nimport Header from './components/header.js'\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = Math.floor(index/width)\n  return { x, y }\n}\nconst getAdjacentTiles = (idx, width)  => {\n  const { x, y } = getXYfromIndex(idx, width)\n  const neighbors = []\n\n  for (let xOff = -1; xOff < 2; ++xOff){\n    for (let yOff = -1; yOff < 2; ++yOff){\n      \n    } \n  } \n  // const topL = idx - (width + 1)\n  // const top = idx - width\n  // const topR = idx - (width - 1)\n  // const L = idx - 1\n  // const R = idx + 1\n  // const botL = idx + (width - 1)\n  // const bot= idx + width\n  // const botR = idx + (width + 1)\n  // const neighborIndexes = []\n  \n  // if (x === 0){\n  //   if (y === 0){\n  //     neighborIndexes.push(R, bot, botR)     // left top corner\n  //   } else if (y === height - 1){\n  //     neighborIndexes.push(R, top, topR)     // left bot corner\n  //   } else {\n  //     neighborIndexes.push(top, topR, R, bot, botR)   // left side\n  //   }\n  // } else if (x === width - 1){\n  //   if (y === 0){\n  //     neighborIndexes.push(L, bot, botL)    // right top corner\n  //   } else if (y === height - 1){\n  //     neighborIndexes.push(L, top, topL)    // right bot corner\n  //   } else {\n  //     neighborIndexes.push(top, topL, L, bot, botL)   // right side\n  //   }\n  // } else if (y === 0){\n  //   neighborIndexes.push(L, botL, bot, botR, R)   // top\n  // } else if (y === height - 1){\n  //   neighborIndexes.push(L, topL, top, topR, R)   // bot\n  // } else {\n  //   neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR)    // middle\n  // }\n\n\n\n  return neighbors\n}\nconst getAdjacentMineCount = (idx, mineField, width, height) => {\n  let count = 0\n  if (mineField[idx]) return 0\n\n  const neighborIndexes = getAdjacentTileIndexes(idx, width, height)\n\n  neighborIndexes.forEach((idx) => {\n    if (mineField[idx]) {\n      count++\n    }\n  })\n\n  return (count > 0) ? count : null\n}\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = []\n  for (let i = 0; i < hgt; ++i){\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid*i\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: getAdjacentMineCount(idx, mineField, wid, hgt)\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nfunction App() {\n  const [firstClick, setFirstClick] = useState(true)\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([])\n  const [mineField, setMineField] = useState([])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(mineCount)\n\n  useEffect(() => {\n    let interval = null\n    \n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval) // Memory leak preventation?\n  }, [timerOn]);\n\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid){\n      const tileHasMine = mineField[tile.idx]\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n      if (tileHasMine && tileIsOpened) return false\n      if (!tileHasMine && !tileIsOpened) return false\n    }\n    return true\n  }\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false)\n    editableGrid.forEach( (tile) => {\n      if ( !mineField[tile.idx] && tile.status === 'flag') {\n        tile.status = 'flag_incorrect'\n      }\n      if ( mineField[tile.idx] && tile.status !== 'flag') {\n        tile.status = 'mine'\n      }\n      \n      tile.disabled = true\n    })\n    setGameOverText(text)\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height)\n    let neighbouringFlags = 0\n    \n    neighbors.forEach((idx) => {\n      const tile = grid[idx]\n      if (tile.status === 'flag'){\n        neighbouringFlags++\n      }\n    })\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height)\n    neighbors.forEach((idx) => {\n      const tile = grid[idx]\n      if (tile.status === 'hidden'){\n        revealTile(tile)\n      }\n    })\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      setTimerOn(true)\n      setFirstClick(false)\n    }\n    let newGrid = [...grid]\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid, 'Game over!')\n      tile.status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open'\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      gameOver(newGrid, 'Congratulations!')\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        setMinesLeftText(prev => prev + 1)\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0) \n    setFirstClick(true)\n    setGameOverText('')\n    setMinesLeftText(mineCount)\n\n    const newMineField = generateMineField(mineCount, width*height)\n    const newGrid = generateGrid(width, height, newMineField)\n    setMineField(newMineField)\n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--size', width)\n    }\n  }\n  \n  return (\n    <>\n      <Header \n        width={width} height={height} mineCount={mineCount}\n        functions={[\n            setWidth,\n            setHeight,\n            setMineCount,\n            initializeGrid\n          ]}\n      />     \n\n      <div className=\"body\">\n        <Timer time={time} minesLeft={minesLeftText} />\n\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            functions={\n              [ revealTile, \n                flagTile, \n                checkFlagsAndRevealAdjacentTiles ]}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}