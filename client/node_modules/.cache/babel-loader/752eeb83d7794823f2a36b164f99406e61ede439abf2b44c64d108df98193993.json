{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport Grid from './components/grid.js';\nimport Timer from './components/timer.js';\nimport Header from './components/header.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = parseInt(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst getAdjacentTiles = (grid, tile, width) => {\n  const neighbors = [];\n  const {\n    x,\n    y\n  } = getXYfromIndex(tile.idx, width);\n\n  // let ltop = tile.idx - width - 1\n  // let top = tile.idx - width\n  // let rtop = tile.idx - width + 1\n  // let left = tile.idx - 1\n  // let right = tile.idx + 1\n  // let lbot = tile.idx + width - 1\n  // let bot = tile.idx + width\n  // let rbot = tile.idx + width + 1\n\n  // neighbors.push(ltop, top, rtop, left, right, lbot, bot, rbot)\n\n  for (let xOff = -1; xOff < 2; ++xOff) {\n    for (let yOff = -1; yOff < 2; ++yOff) {\n      var _grid;\n      const neighbor = (_grid = grid[tile.x + xOff]) === null || _grid === void 0 ? void 0 : _grid[tile.y + yOff];\n      if (neighbor) neighbors.push(neighbor);\n    }\n  }\n  return neighbors;\n};\nconst addAdjacentMineNumbers = (grid, width) => {\n  for (const tile of grid) {\n    const neighbors = getAdjacentTiles(grid, tile, width);\n    console.log('neighbors:', neighbors);\n    for (let j = 0; j < neighbors.length; ++j) {\n      if (neighbors[j].isMine) tile.adjacentMines++;\n    }\n  }\n};\nconst addMinesToGrid = (grid, mineCount, firstTile) => {\n  if (mineCount > grid.length * grid[0].length) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, grid.length);\n    if (!mineIndexes.includes(randomNumber) || randomNumber === firstTile.idx) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  console.log('mineIndexes');\n  for (const idx of mineIndexes) {\n    grid[idx].isMine = true;\n  }\n};\nconst generateGrid = (wid, hgt) => {\n  let newGrid = [];\n  for (let x = 0; x < hgt; ++x) {\n    const row = [];\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid * x;\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false\n      };\n      row.push(tile);\n    }\n    newGrid.push(row);\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nfunction App() {\n  _s();\n  const [firstClick, setFirstClick] = useState(true);\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([[]]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(mineCount);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Memory leak preventation?\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid) {\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n        if (tile.isMine && tileIsOpened) return false;\n        if (!tile.isMine && !tileIsOpened) return false;\n      }\n    }\n    return true;\n  };\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false);\n    editableGrid.forEach(row => {\n      row.forEach(tile => {\n        if (!tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect';\n        }\n        if (tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine';\n        }\n        tile.disabled = true;\n      });\n    });\n    setGameOverText(text);\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    let neighbouringFlags = 0;\n    for (tile in neighbors) {\n      if (tile.status === 'flag') {\n        neighbouringFlags++;\n      }\n    }\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    for (tile in neighbors) {\n      if (tile.status === 'hidden') {\n        revealTile(tile);\n      }\n    }\n  };\n  const handleFirstClick = tile => {\n    let newGrid = [...grid];\n    console.log('handleFirstClick', newGrid);\n    addMinesToGrid(newGrid, mineCount, tile);\n    addAdjacentMineNumbers(newGrid, width);\n    setGrid(newGrid);\n    setTimerOn(true);\n    setFirstClick(false);\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      handleFirstClick(tile);\n    }\n    let newGrid = [...grid];\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!');\n      newGrid[tile.x][tile.y].status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open';\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      gameOver(newGrid, 'Congratulations!');\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden';\n        setMinesLeftText(prev => prev + 1);\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    setMinesLeftText(mineCount);\n    const newGrid = generateGrid(width, height);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--size', width);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      width: width,\n      height: height,\n      mineCount: mineCount,\n      functions: [setWidth, setHeight, setMineCount, initializeGrid]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        time: time,\n        minesLeft: minesLeftText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        functions: [revealTile, flagTile, checkFlagsAndRevealAdjacentTiles]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"n8jUMM95i0A38W/gJGoCbZuRa2g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Grid","Timer","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","getXYfromIndex","index","width","x","y","parseInt","getAdjacentTiles","grid","tile","neighbors","idx","xOff","yOff","_grid","neighbor","push","addAdjacentMineNumbers","console","log","j","length","isMine","adjacentMines","addMinesToGrid","mineCount","firstTile","mineIndexes","randomNumber","randInt","includes","generateGrid","wid","hgt","newGrid","row","id","status","disabled","min","max","Math","floor","random","App","_s","firstClick","setFirstClick","height","setHeight","setWidth","setMineCount","setGrid","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","interval","setInterval","prevTime","clearInterval","checkForWin","tileIsOpened","gameOver","editableGrid","text","forEach","checkFlagsAndRevealAdjacentTiles","neighbouringFlags","revealAdjacentHiddenTiles","revealTile","handleFirstClick","flagTile","prev","initializeGrid","board","document","querySelector","style","setProperty","children","functions","fileName","_jsxFileName","lineNumber","columnNumber","className","minesLeft","_c","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState, useEffect  } from 'react'\nimport Grid from './components/grid.js'\nimport Timer from './components/timer.js'\nimport Header from './components/header.js'\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = parseInt(index/width)\n  return { x, y }\n}\n\nconst getAdjacentTiles = (grid, tile, width)  => {\n  const neighbors = []\n\n  const {x, y} = getXYfromIndex(tile.idx, width)\n\n  \n  // let ltop = tile.idx - width - 1\n  // let top = tile.idx - width\n  // let rtop = tile.idx - width + 1\n  // let left = tile.idx - 1\n  // let right = tile.idx + 1\n  // let lbot = tile.idx + width - 1\n  // let bot = tile.idx + width\n  // let rbot = tile.idx + width + 1\n\n  // neighbors.push(ltop, top, rtop, left, right, lbot, bot, rbot)\n\n  for (let xOff = -1; xOff < 2; ++xOff){\n    for (let yOff = -1; yOff < 2; ++yOff){\n      const neighbor = grid[tile.x + xOff]?.[tile.y + yOff]\n\n      if (neighbor) neighbors.push(neighbor)\n    } \n  }\n  return neighbors\n}\nconst addAdjacentMineNumbers = (grid, width) => {\n  for ( const tile of grid ) {\n    const neighbors = getAdjacentTiles(grid, tile, width)\n\n    console.log('neighbors:', neighbors)\n    for (let j = 0; j<neighbors.length; ++j) {\n      if (neighbors[j].isMine) tile.adjacentMines++\n    }\n\n  }\n}\nconst addMinesToGrid = (grid, mineCount, firstTile) => {\n  if ( mineCount > grid.length * grid[0].length ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let mineIndexes = []\n\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, grid.length)\n    if (!mineIndexes.includes(randomNumber) || randomNumber===firstTile.idx) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  console.log('mineIndexes')\n  for (const idx of mineIndexes) {\n    grid[idx].isMine = true\n  }\n}\nconst generateGrid = (wid, hgt) => {\n  let newGrid = []\n  for (let x = 0; x < hgt; ++x){\n    const row = []\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid*x\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false,\n      }\n      row.push(tile)\n    }\n    newGrid.push(row)\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction App() {\n  const [firstClick, setFirstClick] = useState(true)\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([[]])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(mineCount)\n\n  useEffect(() => {\n    let interval = null\n    \n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval) // Memory leak preventation?\n  }, [timerOn]);\n\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid){\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n        if (tile.isMine && tileIsOpened) return false\n        if (!tile.isMine && !tileIsOpened) return false\n      }\n    }\n    return true\n  }\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false)\n    editableGrid.forEach((row) => {\n      row.forEach( (tile) => {\n        if ( !tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect'\n        }\n        if ( tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine'\n        }\n        \n        tile.disabled = true\n      })\n    })\n    setGameOverText(text)\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    let neighbouringFlags = 0\n    \n    for (tile in neighbors) {\n      if (tile.status === 'flag'){\n        neighbouringFlags++\n      }\n    }\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    for (tile in neighbors){\n      if (tile.status === 'hidden'){\n        revealTile(tile)\n      }\n    }\n  }\n  const handleFirstClick = (tile) => {\n    let newGrid = [...grid]\n    console.log('handleFirstClick', newGrid)\n    addMinesToGrid(newGrid, mineCount, tile) \n\n    addAdjacentMineNumbers(newGrid, width)\n    setGrid(newGrid)\n\n    setTimerOn(true)\n    setFirstClick(false)\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      handleFirstClick(tile)\n    }\n\n    let newGrid = [...grid]\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!')\n      newGrid[tile.x][tile.y].status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open'\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      gameOver(newGrid, 'Congratulations!')\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden'\n        setMinesLeftText(prev => prev + 1)\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0) \n    setFirstClick(true)\n    setGameOverText('')\n    setMinesLeftText(mineCount)\n    \n    const newGrid = generateGrid(width, height)\n    \n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--size', width)\n    }\n  }\n  \n  return (\n    <>\n      <Header \n        width={width} height={height} mineCount={mineCount}\n        functions={[\n            setWidth,\n            setHeight,\n            setMineCount,\n            initializeGrid\n          ]}\n      />     \n\n      <div className=\"body\">\n        <Timer time={time} minesLeft={minesLeftText} />\n\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            functions={\n              [ revealTile, \n                flagTile, \n                checkFlagsAndRevealAdjacentTiles ]}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}