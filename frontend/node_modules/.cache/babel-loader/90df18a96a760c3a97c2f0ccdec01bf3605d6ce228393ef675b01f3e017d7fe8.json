{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport scoreService from './services/scores';\nimport Grid from './components/grid.js';\nimport Timer from './components/timer.js';\nimport Header from './components/header.js';\nimport './styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = parseInt(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst getAdjacentTiles = (grid, tile) => {\n  const neighbors = [];\n  for (let xOff = -1; xOff < 2; ++xOff) {\n    for (let yOff = -1; yOff < 2; ++yOff) {\n      var _grid;\n      const neighbor = (_grid = grid[tile.x + xOff]) === null || _grid === void 0 ? void 0 : _grid[tile.y + yOff];\n      if (neighbor) neighbors.push(neighbor);\n    }\n  }\n  return neighbors;\n};\nconst addAdjacentMineNumbers = grid => {\n  for (const row of grid) {\n    for (const tile of row) {\n      const neighbors = getAdjacentTiles(grid, tile);\n      for (let j = 0; j < neighbors.length; ++j) {\n        if (neighbors[j].isMine) tile.adjacentMines++;\n      }\n    }\n  }\n};\nconst addMinesToGrid = (grid, mineCount) => {\n  const gridlen = grid.length * grid[0].length;\n  if (mineCount > gridlen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridlen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  for (const idx of mineIndexes) {\n    const {\n      x,\n      y\n    } = getXYfromIndex(idx, grid.length);\n    grid[x][y].isMine = true;\n  }\n};\nconst generateGrid = (wid, hgt) => {\n  let newGrid = [];\n  for (let x = 0; x < hgt; ++x) {\n    const row = [];\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid * x;\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false\n      };\n      row.push(tile);\n    }\n    newGrid.push(row);\n  }\n  return newGrid;\n};\nfunction App() {\n  _s();\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [firstClick, setFirstClick] = useState(true);\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([[]]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(mineCount);\n  const [topScores, setTopScores] = useState([{\n    username: 'default-ukko',\n    time: 123,\n    id: 1\n  }]);\n  useEffect(() => {\n    switch (difficulty) {\n      case 'BEGINNER':\n        setHeight(9);\n        setWidth(9);\n      case 'INTERMEDIATE':\n        setHeight(16);\n        setWidth(16);\n      case 'EXTREME':\n        setHeight(40);\n        setWidth(40);\n      case 'CUSTOM':\n        setHeight(9);\n        setWidth(9);\n      default:\n        setHeight(9);\n        setWidth(9);\n    }\n    initializeGrid();\n  }, [difficulty]);\n  useEffect(() => {\n    scoreService.getAll().then(scores => {\n      scores.sort((a, b) => b.time + a.time);\n      setTopScores(scores);\n    });\n  }, []);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Memory leak preventation?\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid) {\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n        if (tile.isMine && tileIsOpened) return false;\n        if (!tile.isMine && !tileIsOpened) return false;\n      }\n    }\n    return true;\n  };\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false);\n    editableGrid.forEach(row => {\n      row.forEach(tile => {\n        if (!tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect';\n        }\n        if (tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine';\n        }\n        tile.disabled = true;\n      });\n    });\n    setGameOverText(text);\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    neighbors.forEach(tile => {\n      if (tile.status === 'hidden') revealTile(tile);\n    });\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    let neighbouringFlags = 0;\n    neighbors.forEach(tile => {\n      if (tile.status === 'flag') neighbouringFlags++;\n    });\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const handleFirstClick = () => {\n    setFirstClick(false);\n    setTimerOn(true);\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      handleFirstClick();\n    }\n    let newGrid = [...grid];\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!');\n      newGrid[tile.x][tile.y].status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open';\n      if (tile.adjacentMines < 1) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      gameOver(newGrid, 'Congratulations!');\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden';\n        setMinesLeftText(prev => prev + 1);\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    setMinesLeftText(mineCount);\n    const newGrid = generateGrid(width, height);\n    addMinesToGrid(newGrid, mineCount);\n    addAdjacentMineNumbers(newGrid, width);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--boardWidth', width);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      difficulty: difficulty,\n      width: width,\n      height: height,\n      mineCount: mineCount,\n      functions: [setDifficulty, setWidth, setHeight, setMineCount, initializeGrid],\n      topScores: topScores\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        time: time,\n        minesLeft: minesLeftText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        functions: [revealTile, flagTile, checkFlagsAndRevealAdjacentTiles]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"imw2QBievDFYhhPHW6lgpzS6mBM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","scoreService","Grid","Timer","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","getXYfromIndex","index","width","x","y","parseInt","randInt","min","max","Math","floor","random","getAdjacentTiles","grid","tile","neighbors","xOff","yOff","_grid","neighbor","push","addAdjacentMineNumbers","row","j","length","isMine","adjacentMines","addMinesToGrid","mineCount","gridlen","console","log","mineIndexes","randomNumber","includes","idx","generateGrid","wid","hgt","newGrid","id","status","disabled","App","_s","difficulty","setDifficulty","firstClick","setFirstClick","height","setHeight","setWidth","setMineCount","setGrid","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","topScores","setTopScores","username","initializeGrid","getAll","then","scores","sort","a","b","interval","setInterval","prevTime","clearInterval","checkForWin","tileIsOpened","gameOver","editableGrid","text","forEach","revealAdjacentHiddenTiles","revealTile","checkFlagsAndRevealAdjacentTiles","neighbouringFlags","handleFirstClick","flagTile","prev","board","document","querySelector","style","setProperty","children","functions","fileName","_jsxFileName","lineNumber","columnNumber","className","minesLeft","_c","$RefreshReg$"],"sources":["/home/ville/miinaharava/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect  } from 'react'\nimport scoreService from './services/scores'\nimport Grid from './components/grid.js'\nimport Timer from './components/timer.js'\nimport Header from './components/header.js'\nimport './styles.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = parseInt(index/width)\n  return { x, y }\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst getAdjacentTiles = (grid, tile)  => {\n  const neighbors = []\n  for (let xOff = -1; xOff < 2; ++xOff){\n    for (let yOff = -1; yOff < 2; ++yOff){\n      const neighbor = grid[tile.x + xOff]?.[tile.y + yOff]\n      if (neighbor) neighbors.push(neighbor)\n    } \n  }\n  return neighbors\n}\nconst addAdjacentMineNumbers = (grid) => {\n  for ( const row of grid ) {\n    for ( const tile of row ) {\n      const neighbors = getAdjacentTiles(grid, tile)\n      for (let j = 0; j<neighbors.length; ++j) {\n        if (neighbors[j].isMine) tile.adjacentMines++\n      }\n    }\n  }\n}\nconst addMinesToGrid = (grid, mineCount) => {\n  const gridlen = grid.length * grid[0].length\n  if ( mineCount > gridlen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridlen)\n\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  for (const idx of mineIndexes) {\n    const {x, y} = getXYfromIndex(idx, grid.length)\n    grid[x][y].isMine = true\n  }\n}\nconst generateGrid = (wid, hgt) => {\n  let newGrid = []\n  for (let x = 0; x < hgt; ++x){\n    const row = []\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid*x\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false,\n      }\n      row.push(tile)\n    }\n    newGrid.push(row)\n  }\n  return newGrid\n}\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState('BEGINNER')\n  const [firstClick, setFirstClick] = useState(true)\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([[]])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(mineCount)\n\n  const [topScores, setTopScores] = useState([{ username:'default-ukko', time: 123, id: 1 }])\n\n  useEffect(() => {\n    switch(difficulty){\n      case 'BEGINNER':\n        setHeight(9)\n        setWidth(9)\n\n      case 'INTERMEDIATE':\n        setHeight(16)\n        setWidth(16)\n\n      case 'EXTREME':\n        setHeight(40)\n        setWidth(40)\n\n      case 'CUSTOM':\n        setHeight(9)\n        setWidth(9)\n\n      default:\n        setHeight(9)\n        setWidth(9)\n        \n    }\n    initializeGrid()\n  }, [difficulty])\n  \n  useEffect(() => {\n    scoreService.getAll().then(scores => {\n      scores.sort((a, b) => b.time + a.time)\n      setTopScores( scores )\n    })\n  }, [])\n\n  useEffect(() => {\n    let interval = null\n    \n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval) // Memory leak preventation?\n  }, [timerOn])\n  \n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid){\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n        if (tile.isMine && tileIsOpened) return false\n        if (!tile.isMine && !tileIsOpened) return false\n      }\n    }\n    return true\n  }\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false)\n    editableGrid.forEach((row) => {\n      row.forEach( (tile) => {\n        if ( !tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect'\n        }\n        if ( tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine'\n        }\n        \n        tile.disabled = true\n      })\n    })\n    setGameOverText(text)\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n\n    neighbors.forEach(tile => {\n      if (tile.status === 'hidden') revealTile(tile)\n    })\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    let neighbouringFlags = 0\n    \n    neighbors.forEach(tile => {\n      if (tile.status === 'flag') neighbouringFlags++\n    })\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const handleFirstClick = () => {\n    setFirstClick(false)\n    setTimerOn(true)\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      handleFirstClick()\n    }\n\n    let newGrid = [...grid]\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!')\n      newGrid[tile.x][tile.y].status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open'\n      if (tile.adjacentMines < 1) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      gameOver(newGrid, 'Congratulations!')\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden'\n        setMinesLeftText(prev => prev + 1)\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0) \n    setFirstClick(true)\n    setGameOverText('')\n    setMinesLeftText(mineCount)\n    const newGrid = generateGrid(width, height)\n    addMinesToGrid(newGrid, mineCount)\n    addAdjacentMineNumbers(newGrid, width)\n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--boardWidth', width)\n    }\n  }\n  \n  return (\n    <>\n      <Header\n        difficulty={difficulty} width={width} height={height} mineCount={mineCount}\n        functions={[\n            setDifficulty,\n            setWidth,\n            setHeight,\n            setMineCount,\n            initializeGrid\n          ]}\n        topScores={topScores}\n      />\n\n      <div className=\"body\">\n        <Timer time={time} minesLeft={minesLeftText} />\n\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            functions={\n              [ revealTile,\n                flagTile,\n                checkFlagsAndRevealAdjacentTiles ]}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}