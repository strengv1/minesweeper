{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport Grid from './components/grid.js';\nimport Timer from './components/timer.js';\nimport Header from './components/header.js';\n\n// const getXYfromIndex = (index, width) => {\n//   const x = index%width\n//   const y = Math.floor(index/width)\n//   return { x, y }\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getAdjacentTiles = (grid, tile) => {\n  const neighbors = [];\n  for (let xOff = -1; xOff < 2; ++xOff) {\n    for (let yOff = -1; yOff < 2; ++yOff) {\n      var _grid;\n      const neighbor = (_grid = grid[tile.x + xOff]) === null || _grid === void 0 ? void 0 : _grid[tile.y + yOff];\n      if (neighbor) neighbors.push(neighbor);\n    }\n  }\n  return neighbors;\n};\nconst addAdjacentMineNumbers = grid => {\n  for (let i = 0; i < grid.length; ++i) {\n    let tile = grid[i];\n    const neighbors = getAdjacentTiles(grid, tile);\n    for (let j = 0; j < neighbors.length; ++j) {\n      if (neighbors[j].isMine) tile.adjacentMines++;\n    }\n  }\n};\nconst generateGrid = (wid, hgt) => {\n  let newGrid = [];\n  for (let i = 0; i < hgt; ++i) {\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid * i;\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nfunction App() {\n  _s();\n  const [firstClick, setFirstClick] = useState(true);\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(mineCount);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Memory leak preventation?\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid) {\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n      if (tile.isMine && tileIsOpened) return false;\n      if (!tile.isMine && !tileIsOpened) return false;\n    }\n    return true;\n  };\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false);\n    editableGrid.forEach(tile => {\n      if (!tile.isMine && tile.status === 'flag') {\n        tile.status = 'flag_incorrect';\n      }\n      if (tile.isMine && tile.status !== 'flag') {\n        tile.status = 'mine';\n      }\n      tile.disabled = true;\n    });\n    setGameOverText(text);\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    let neighbouringFlags = 0;\n    for (tile in neighbors) {\n      if (tile.status === 'flag') {\n        neighbouringFlags++;\n      }\n    }\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    for (tile in neighbors) {\n      if (tile.status === 'hidden') {\n        revealTile(tile);\n      }\n    }\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      let newGrid = [...grid];\n      addMinesToGrid(newGrid, mineCount, tile);\n      addAdjacentMineNumbers(newGrid);\n      setGrid(newGrid);\n      setTimerOn(true);\n      setFirstClick(false);\n    }\n    let newGrid = [...grid];\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!');\n      tile.status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open';\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      gameOver(newGrid, 'Congratulations!');\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        setMinesLeftText(prev => prev + 1);\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    setMinesLeftText(mineCount);\n    const newGrid = generateGrid(width, height);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--size', width);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      width: width,\n      height: height,\n      mineCount: mineCount,\n      functions: [setWidth, setHeight, setMineCount, initializeGrid]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        time: time,\n        minesLeft: minesLeftText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        functions: [revealTile, flagTile, checkFlagsAndRevealAdjacentTiles]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"cHp+usOzpGtLhgovSn7KmiWactQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Grid","Timer","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","getAdjacentTiles","grid","tile","neighbors","xOff","yOff","_grid","neighbor","x","y","push","addAdjacentMineNumbers","i","length","j","isMine","adjacentMines","generateGrid","wid","hgt","newGrid","idx","id","status","disabled","randInt","min","max","Math","floor","random","App","_s","firstClick","setFirstClick","height","setHeight","width","setWidth","mineCount","setMineCount","setGrid","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","interval","setInterval","prevTime","clearInterval","checkForWin","tileIsOpened","includes","gameOver","editableGrid","text","forEach","checkFlagsAndRevealAdjacentTiles","neighbouringFlags","revealAdjacentHiddenTiles","revealTile","addMinesToGrid","flagTile","prev","initializeGrid","board","document","querySelector","style","setProperty","children","functions","fileName","_jsxFileName","lineNumber","columnNumber","className","minesLeft","_c","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState, useEffect  } from 'react'\nimport Grid from './components/grid.js'\nimport Timer from './components/timer.js'\nimport Header from './components/header.js'\n\n// const getXYfromIndex = (index, width) => {\n//   const x = index%width\n//   const y = Math.floor(index/width)\n//   return { x, y }\n// }\nconst getAdjacentTiles = (grid, tile)  => {\n  const neighbors = []\n\n  for (let xOff = -1; xOff < 2; ++xOff){\n    for (let yOff = -1; yOff < 2; ++yOff){\n      const neighbor = grid[tile.x + xOff]?.[tile.y + yOff]\n      if (neighbor) neighbors.push(neighbor)\n    } \n  }\n  return neighbors\n}\nconst addAdjacentMineNumbers = (grid) => {\n  for (let i = 0; i<grid.length; ++i){\n    let tile = grid[i]\n    const neighbors = getAdjacentTiles(grid, tile)\n\n    for (let j = 0; j<neighbors.length; ++j) {\n      if (neighbors[j].isMine) tile.adjacentMines++\n    }\n\n  }\n}\n\nconst generateGrid = (wid, hgt) => {\n  let newGrid = []\n  for (let i = 0; i < hgt; ++i){\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid*i\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false,\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nfunction App() {\n  const [firstClick, setFirstClick] = useState(true)\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(mineCount)\n\n  useEffect(() => {\n    let interval = null\n    \n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval) // Memory leak preventation?\n  }, [timerOn]);\n\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid){\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n      if (tile.isMine && tileIsOpened) return false\n      if (!tile.isMine && !tileIsOpened) return false\n    }\n    return true\n  }\n\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false)\n    editableGrid.forEach( (tile) => {\n      if ( !tile.isMine && tile.status === 'flag') {\n        tile.status = 'flag_incorrect'\n      }\n      if ( tile.isMine && tile.status !== 'flag') {\n        tile.status = 'mine'\n      }\n      \n      tile.disabled = true\n    })\n    setGameOverText(text)\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    let neighbouringFlags = 0\n    \n    for (tile in neighbors) {\n      if (tile.status === 'flag'){\n        neighbouringFlags++\n      }\n    }\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    for (tile in neighbors){\n      if (tile.status === 'hidden'){\n        revealTile(tile)\n      }\n    }\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      let newGrid = [...grid]\n      addMinesToGrid(newGrid, mineCount, tile) \n\n      addAdjacentMineNumbers(newGrid)\n      setGrid(newGrid)\n\n      setTimerOn(true)\n      setFirstClick(false)\n    }\n    let newGrid = [...grid]\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!')\n      tile.status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open'\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      gameOver(newGrid, 'Congratulations!')\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        setMinesLeftText(prev => prev + 1)\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0) \n    setFirstClick(true)\n    setGameOverText('')\n    setMinesLeftText(mineCount)\n    \n    const newGrid = generateGrid(width, height)\n    \n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--size', width)\n    }\n  }\n  \n  return (\n    <>\n      <Header \n        width={width} height={height} mineCount={mineCount}\n        functions={[\n            setWidth,\n            setHeight,\n            setMineCount,\n            initializeGrid\n          ]}\n      />     \n\n      <div className=\"body\">\n        <Timer time={time} minesLeft={minesLeftText} />\n\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            functions={\n              [ revealTile, \n                flagTile, \n                checkFlagsAndRevealAdjacentTiles ]}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}