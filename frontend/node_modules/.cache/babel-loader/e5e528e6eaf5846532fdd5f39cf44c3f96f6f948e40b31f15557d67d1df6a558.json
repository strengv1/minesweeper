{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport Tile from './components/tile.js';\nimport Timer from './components/timer.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  grid,\n  revealTile,\n  flagTile,\n  checkFlagsAndRevealAdjacentTiles\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: grid.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n      tile: tile,\n      revealTile: revealTile,\n      flagTile: flagTile,\n      checkFlagsAndRevealAdjacentTiles: checkFlagsAndRevealAdjacentTiles\n    }, tile.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 3\n  }, this);\n};\n_c = Grid;\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = Math.floor(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst getAdjacentTileIndexes = (idx, width, height) => {\n  const {\n    x,\n    y\n  } = getXYfromIndex(idx, width);\n  const topL = idx - (width + 1);\n  const top = idx - width;\n  const topR = idx - (width - 1);\n  const L = idx - 1;\n  const R = idx + 1;\n  const botL = idx + (width - 1);\n  const bot = idx + width;\n  const botR = idx + (width + 1);\n  const neighborIndexes = [];\n  if (x === 0) {\n    if (y === 0) {\n      neighborIndexes.push(R, bot, botR); // left top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(R, top, topR); // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR); // left side\n    }\n  } else if (x === width - 1) {\n    if (y === 0) {\n      neighborIndexes.push(L, bot, botL); // right top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(L, top, topL); // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL); // right side\n    }\n  } else if (y === 0) {\n    neighborIndexes.push(L, botL, bot, botR, R); // top\n  } else if (y === height - 1) {\n    neighborIndexes.push(L, topL, top, topR, R); // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR); // middle\n  }\n\n  return neighborIndexes;\n};\nconst getAdjacentMineCount = (idx, mineField, width, height) => {\n  let count = 0;\n  if (mineField[idx]) return 0;\n  const neighborIndexes = getAdjacentTileIndexes(idx, width, height);\n  neighborIndexes.forEach(idx => {\n    if (mineField[idx]) {\n      count++;\n    }\n  });\n  return count > 0 ? count : null;\n};\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = [];\n  for (let i = 0; i < hgt; ++i) {\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid * i;\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: getAdjacentMineCount(idx, mineField, wid, hgt)\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nfunction App() {\n  _s();\n  const [firstClick, setFirstClick] = useState(true);\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([]);\n  const [mineField, setMineField] = useState([]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(mineCount);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid) {\n      const tileHasMine = mineField[tile.idx];\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n      if (tileHasMine && tileIsOpened) return false;\n      if (!tileHasMine && !tileIsOpened) return false;\n    }\n    return true;\n  };\n\n  // Call this when game is won:\n  // 1. Reveal all non-flagged mines\n  // 2. Disable all tiles\n  const win = editableGrid => {\n    setTimerOn(false);\n    editableGrid.forEach(tile => {\n      if (tile.disabled) return;\n      if (mineField[tile.idx] && tile.status !== 'flag') {\n        tile.status = 'mine';\n      }\n      tile.disabled = true;\n    });\n    setGameOverText('Congratulations!');\n  };\n  // Call when game is lost\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = editableGrid => {\n    setTimerOn(false);\n    editableGrid.forEach(tile => {\n      if (!mineField[tile.idx] && tile.status === 'flag') {\n        tile.status = 'flag_incorrect';\n      }\n      if (mineField[tile.idx] && tile.status !== 'flag') {\n        tile.status = 'mine';\n      }\n      tile.disabled = true;\n    });\n    setGameOverText('Game over!');\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height);\n    let neighbouringFlags = 0;\n    neighbors.forEach(idx => {\n      const tile = grid[idx];\n      if (tile.status === 'flag') {\n        neighbouringFlags++;\n      }\n    });\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height);\n    neighbors.forEach(idx => {\n      const tile = grid[idx];\n      if (tile.status === 'hidden') {\n        revealTile(tile);\n      }\n    });\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      setTimerOn(true);\n      setFirstClick(false);\n    }\n    let newGrid = [...grid];\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid);\n      tile.status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open';\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      win(newGrid);\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    const newMineField = generateMineField(mineCount, width * height);\n    const newGrid = generateGrid(width, height, newMineField);\n    setMineField(newMineField);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--size', width);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: e => setWidth(Number(e.target.value)),\n        type: \"text\",\n        id: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: height,\n        onChange: e => setHeight(Number(e.target.value)),\n        type: \"text\",\n        id: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"mineCount\",\n        children: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: mineCount,\n        onChange: e => setMineCount(Number(e.target.value)),\n        type: \"text\",\n        id: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: initializeGrid,\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        time: time,\n        minesLeft: minesLeftText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        revealTile: revealTile,\n        flagTile: flagTile,\n        checkFlagsAndRevealAdjacentTiles: checkFlagsAndRevealAdjacentTiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"RZFgPw7QxrYha1fz/Bh10dzuJHY=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","useEffect","Tile","Timer","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","grid","revealTile","flagTile","checkFlagsAndRevealAdjacentTiles","className","children","map","tile","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","getXYfromIndex","index","width","x","y","Math","floor","getAdjacentTileIndexes","idx","height","topL","top","topR","L","R","botL","bot","botR","neighborIndexes","push","getAdjacentMineCount","mineField","count","forEach","generateGrid","wid","hgt","newGrid","i","j","status","disabled","adjacentMines","randInt","min","max","random","generateMineField","mineCount","gridLen","console","log","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","App","_s","firstClick","setFirstClick","setHeight","setWidth","setMineCount","setGrid","setMineField","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","interval","setInterval","prevTime","clearInterval","checkForWin","tileHasMine","tileIsOpened","win","editableGrid","gameOver","neighbors","neighbouringFlags","revealAdjacentHiddenTiles","prev","initializeGrid","board","document","querySelector","style","setProperty","htmlFor","value","onChange","e","Number","target","type","onClick","minesLeft","_c2","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState, useEffect  } from 'react'\nimport Tile from './components/tile.js'\nimport Timer from './components/timer.js'\n\nconst Grid = ({ grid, revealTile, flagTile, checkFlagsAndRevealAdjacentTiles }) => {\n  return (\n  <div className=\"board\">\n    {grid.map( tile =>\n      <Tile \n        key={tile.id}\n        tile={tile} \n        revealTile={ revealTile }\n        flagTile={flagTile}\n        checkFlagsAndRevealAdjacentTiles={checkFlagsAndRevealAdjacentTiles}\n        />\n    )}\n  </div>\n)}\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = Math.floor(index/width)\n  return { x, y }\n}\nconst getAdjacentTileIndexes = (idx, width, height)  => {\n  const { x, y } = getXYfromIndex(idx, width)\n  \n  const topL = idx - (width + 1)\n  const top = idx - width\n  const topR = idx - (width - 1)\n  const L = idx - 1\n  const R = idx + 1\n  const botL = idx + (width - 1)\n  const bot= idx + width\n  const botR = idx + (width + 1)\n  const neighborIndexes = []\n  \n  if (x === 0){\n    if (y === 0){\n      neighborIndexes.push(R, bot, botR)     // left top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(R, top, topR)     // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR)   // left side\n    }\n  } else if (x === width - 1){\n    if (y === 0){\n      neighborIndexes.push(L, bot, botL)    // right top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(L, top, topL)    // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL)   // right side\n    }\n  } else if (y === 0){\n    neighborIndexes.push(L, botL, bot, botR, R)   // top\n  } else if (y === height - 1){\n    neighborIndexes.push(L, topL, top, topR, R)   // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR)    // middle\n  }\n\n  return neighborIndexes\n}\nconst getAdjacentMineCount = (idx, mineField, width, height) => {\n  let count = 0\n  if (mineField[idx]) return 0\n\n  const neighborIndexes = getAdjacentTileIndexes(idx, width, height)\n\n  neighborIndexes.forEach((idx) => {\n    if (mineField[idx]) {\n      count++\n    }\n  })\n\n  return (count > 0) ? count : null\n}\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = []\n  for (let i = 0; i < hgt; ++i){\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid*i\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: getAdjacentMineCount(idx, mineField, wid, hgt)\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nfunction App() {\n  const [firstClick, setFirstClick] = useState(true)\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([])\n  const [mineField, setMineField] = useState([])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(mineCount)\n\n  useEffect(() => {\n    let interval = null\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval)\n  }, [timerOn]);\n\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid){\n      const tileHasMine = mineField[tile.idx]\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n      if (tileHasMine && tileIsOpened) return false\n      if (!tileHasMine && !tileIsOpened) return false\n    }\n    return true\n  }\n\n  // Call this when game is won:\n  // 1. Reveal all non-flagged mines\n  // 2. Disable all tiles\n  const win = (editableGrid) => {\n    setTimerOn(false)\n    editableGrid.forEach( (tile) => {\n      if ( tile.disabled ) return\n\n      if ( mineField[tile.idx] && tile.status !== 'flag' ) {\n        tile.status = 'mine' \n      }\n      tile.disabled = true\n    })\n    setGameOverText('Congratulations!')\n  }\n  // Call when game is lost\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid) => {\n    setTimerOn(false)\n    editableGrid.forEach( (tile) => {\n      if ( !mineField[tile.idx] && tile.status === 'flag') {\n        tile.status = 'flag_incorrect'\n      }\n      if ( mineField[tile.idx] && tile.status !== 'flag') {\n        tile.status = 'mine'\n      }\n      \n      tile.disabled = true\n    })\n    setGameOverText('Game over!')\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height)\n    let neighbouringFlags = 0\n    \n    neighbors.forEach((idx) => {\n      const tile = grid[idx]\n      if (tile.status === 'flag'){\n        neighbouringFlags++\n      }\n    })\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTileIndexes(tile.idx, width, height)\n    neighbors.forEach((idx) => {\n      const tile = grid[idx]\n      if (tile.status === 'hidden'){\n        revealTile(tile)\n      }\n    })\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      setTimerOn(true)\n      setFirstClick(false)\n    }\n    let newGrid = [...grid]\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid)\n      tile.status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open'\n      if (!tile.adjacentMines) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      win(newGrid)\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0) \n    setFirstClick(true)\n    setGameOverText('')\n    const newMineField = generateMineField(mineCount, width*height)\n    const newGrid = generateGrid(width, height, newMineField)\n    setMineField(newMineField)\n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--size', width)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n\n        <label htmlFor=\"width\">width</label>\n        <input\n          value={width}\n          onChange={e => setWidth(Number(e.target.value))}\n          type=\"text\"\n          id=\"width\"/>\n\n        <label htmlFor=\"height\">height</label>\n        <input\n          value={height}\n          onChange={e => setHeight(Number(e.target.value))}\n          type=\"text\"\n          id=\"height\"/>\n\n        <label htmlFor=\"mineCount\">mineCount</label>\n        <input\n          value={mineCount}\n          onChange={e => setMineCount(Number(e.target.value))}\n          type=\"text\"\n          id=\"mineCount\"/>\n\n        <button\n          onClick={initializeGrid}\n          > New Game </button>\n      </div>\n\n      \n      <div className=\"body\">\n        \n        <Timer time={time} minesLeft={minesLeftText} />\n\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            revealTile={revealTile}\n            flagTile={flagTile}\n            checkFlagsAndRevealAdjacentTiles={checkFlagsAndRevealAdjacentTiles}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAO,cAAc;AACrB,SAASA,QAAQ,EAAEC,SAAS,QAAS,OAAO;AAC5C,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,KAAK,MAAM,uBAAuB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzC,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,UAAU;EAAEC,QAAQ;EAAEC;AAAiC,CAAC,KAAK;EACjF,oBACAP,OAAA;IAAKQ,SAAS,EAAC,OAAO;IAAAC,QAAA,EACnBL,IAAI,CAACM,GAAG,CAAEC,IAAI,iBACbX,OAAA,CAACH,IAAI;MAEHc,IAAI,EAAEA,IAAK;MACXN,UAAU,EAAGA,UAAY;MACzBC,QAAQ,EAAEA,QAAS;MACnBC,gCAAgC,EAAEA;IAAiC,GAJ9DI,IAAI,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKX,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AACP,CAAC;AAAAC,EAAA,GAbId,IAAI;AAeV,MAAMe,cAAc,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EACvC,MAAMC,CAAC,GAAGF,KAAK,GAACC,KAAK;EACrB,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,GAACC,KAAK,CAAC;EACjC,OAAO;IAAEC,CAAC;IAAEC;EAAE,CAAC;AACjB,CAAC;AACD,MAAMG,sBAAsB,GAAGA,CAACC,GAAG,EAAEN,KAAK,EAAEO,MAAM,KAAM;EACtD,MAAM;IAAEN,CAAC;IAAEC;EAAE,CAAC,GAAGJ,cAAc,CAACQ,GAAG,EAAEN,KAAK,CAAC;EAE3C,MAAMQ,IAAI,GAAGF,GAAG,IAAIN,KAAK,GAAG,CAAC,CAAC;EAC9B,MAAMS,GAAG,GAAGH,GAAG,GAAGN,KAAK;EACvB,MAAMU,IAAI,GAAGJ,GAAG,IAAIN,KAAK,GAAG,CAAC,CAAC;EAC9B,MAAMW,CAAC,GAAGL,GAAG,GAAG,CAAC;EACjB,MAAMM,CAAC,GAAGN,GAAG,GAAG,CAAC;EACjB,MAAMO,IAAI,GAAGP,GAAG,IAAIN,KAAK,GAAG,CAAC,CAAC;EAC9B,MAAMc,GAAG,GAAER,GAAG,GAAGN,KAAK;EACtB,MAAMe,IAAI,GAAGT,GAAG,IAAIN,KAAK,GAAG,CAAC,CAAC;EAC9B,MAAMgB,eAAe,GAAG,EAAE;EAE1B,IAAIf,CAAC,KAAK,CAAC,EAAC;IACV,IAAIC,CAAC,KAAK,CAAC,EAAC;MACVc,eAAe,CAACC,IAAI,CAACL,CAAC,EAAEE,GAAG,EAAEC,IAAI,CAAC,EAAK;IACzC,CAAC,MAAM,IAAIb,CAAC,KAAKK,MAAM,GAAG,CAAC,EAAC;MAC1BS,eAAe,CAACC,IAAI,CAACL,CAAC,EAAEH,GAAG,EAAEC,IAAI,CAAC,EAAK;IACzC,CAAC,MAAM;MACLM,eAAe,CAACC,IAAI,CAACR,GAAG,EAAEC,IAAI,EAAEE,CAAC,EAAEE,GAAG,EAAEC,IAAI,CAAC,EAAG;IAClD;EACF,CAAC,MAAM,IAAId,CAAC,KAAKD,KAAK,GAAG,CAAC,EAAC;IACzB,IAAIE,CAAC,KAAK,CAAC,EAAC;MACVc,eAAe,CAACC,IAAI,CAACN,CAAC,EAAEG,GAAG,EAAED,IAAI,CAAC,EAAI;IACxC,CAAC,MAAM,IAAIX,CAAC,KAAKK,MAAM,GAAG,CAAC,EAAC;MAC1BS,eAAe,CAACC,IAAI,CAACN,CAAC,EAAEF,GAAG,EAAED,IAAI,CAAC,EAAI;IACxC,CAAC,MAAM;MACLQ,eAAe,CAACC,IAAI,CAACR,GAAG,EAAED,IAAI,EAAEG,CAAC,EAAEG,GAAG,EAAED,IAAI,CAAC,EAAG;IAClD;EACF,CAAC,MAAM,IAAIX,CAAC,KAAK,CAAC,EAAC;IACjBc,eAAe,CAACC,IAAI,CAACN,CAAC,EAAEE,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEH,CAAC,CAAC,EAAG;EAChD,CAAC,MAAM,IAAIV,CAAC,KAAKK,MAAM,GAAG,CAAC,EAAC;IAC1BS,eAAe,CAACC,IAAI,CAACN,CAAC,EAAEH,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEE,CAAC,CAAC,EAAG;EAChD,CAAC,MAAM;IACLI,eAAe,CAACC,IAAI,CAACT,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,CAAC,EAAI;EAClE;;EAEA,OAAOC,eAAe;AACxB,CAAC;AACD,MAAME,oBAAoB,GAAGA,CAACZ,GAAG,EAAEa,SAAS,EAAEnB,KAAK,EAAEO,MAAM,KAAK;EAC9D,IAAIa,KAAK,GAAG,CAAC;EACb,IAAID,SAAS,CAACb,GAAG,CAAC,EAAE,OAAO,CAAC;EAE5B,MAAMU,eAAe,GAAGX,sBAAsB,CAACC,GAAG,EAAEN,KAAK,EAAEO,MAAM,CAAC;EAElES,eAAe,CAACK,OAAO,CAAEf,GAAG,IAAK;IAC/B,IAAIa,SAAS,CAACb,GAAG,CAAC,EAAE;MAClBc,KAAK,EAAE;IACT;EACF,CAAC,CAAC;EAEF,OAAQA,KAAK,GAAG,CAAC,GAAIA,KAAK,GAAG,IAAI;AACnC,CAAC;AACD,MAAME,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEL,SAAS,KAAK;EAC5C,IAAIM,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAE,EAAEE,CAAC,EAAC;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,EAAE,EAAEI,CAAC,EAAE;MAC5B,MAAMrB,GAAG,GAAGqB,CAAC,GAAGJ,GAAG,GAACG,CAAC;MACrB,MAAMnC,IAAI,GAAG;QACXC,EAAE,EAAG,GAAEkC,CAAE,IAAGC,CAAE,EAAC;QACfrB,GAAG,EAAEA,GAAG;QACRsB,MAAM,EAAE,QAAQ;QAChBC,QAAQ,EAAE,KAAK;QACfC,aAAa,EAAEZ,oBAAoB,CAACZ,GAAG,EAAEa,SAAS,EAAEI,GAAG,EAAEC,GAAG;MAC9D,CAAC;MACDC,OAAO,CAACR,IAAI,CAAC1B,IAAI,CAAC;IACpB;EACF;EACA,OAAOkC,OAAO;AAChB,CAAC;AACD,MAAMM,OAAO,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC5B,OAAO9B,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC+B,MAAM,CAAC,CAAC,IAAID,GAAG,GAAGD,GAAG,CAAC,CAAC,GAAGA,GAAG;AACtD,CAAC;AACD,MAAMG,iBAAiB,GAAGA,CAACC,SAAS,EAAEC,OAAO,KAAK;EAChD,IAAKD,SAAS,GAAGC,OAAO,EAAG;IACzBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B,OAAO,CAAC,CAAC;EACX;EACA,IAAIC,YAAY,GAAG,IAAIC,KAAK,CAACJ,OAAO,CAAC,CAACK,IAAI,CAAC,KAAK,CAAC;EACjD,IAAIC,WAAW,GAAG,EAAE;EAEpB,OAAOA,WAAW,CAACC,MAAM,GAAGR,SAAS,EAAE;IACrC,MAAMS,YAAY,GAAGd,OAAO,CAAC,CAAC,EAAEM,OAAO,CAAC;IACxC,IAAI,CAACM,WAAW,CAACG,QAAQ,CAACD,YAAY,CAAC,EAAE;MACvCF,WAAW,CAAC1B,IAAI,CAAC4B,YAAY,CAAC;IAChC;EACF;EACAF,WAAW,CAACtB,OAAO,CAAEf,GAAG,IAAKkC,YAAY,CAAClC,GAAG,CAAC,GAAG,IAAI,CAAC;EACtD,OAAOkC,YAAY;AACrB,CAAC;AAED,SAASO,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG3E,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgC,MAAM,EAAE4C,SAAS,CAAC,GAAG5E,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACyB,KAAK,EAAEoD,QAAQ,CAAC,GAAG7E,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC6D,SAAS,EAAEiB,YAAY,CAAC,GAAG9E,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,IAAI,EAAEsE,OAAO,CAAC,GAAG/E,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAAC4C,SAAS,EAAEoC,YAAY,CAAC,GAAGhF,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiF,YAAY,EAAEC,eAAe,CAAC,GAAGlF,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACmF,IAAI,EAAEC,OAAO,CAAC,GAAGpF,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACqF,OAAO,EAAEC,UAAU,CAAC,GAAGtF,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACuF,aAAa,EAAEC,gBAAgB,CAAC,GAAGxF,QAAQ,CAAC6D,SAAS,CAAC;EAE7D5D,SAAS,CAAC,MAAM;IACd,IAAIwF,QAAQ,GAAG,IAAI;IAEnB,IAAIJ,OAAO,EAAE;MACXI,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3BN,OAAO,CAACO,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;MACnC,CAAC,EAAE,EAAE,CAAC;IACR,CAAC,MAAM;MACLC,aAAa,CAACH,QAAQ,CAAC;IACzB;IAEA,OAAO,MAAMG,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;;EAGb;EACA;EACA;EACA,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB,KAAK,MAAM7E,IAAI,IAAIP,IAAI,EAAC;MACtB,MAAMqF,WAAW,GAAGlD,SAAS,CAAC5B,IAAI,CAACe,GAAG,CAAC;MACvC,MAAMgE,YAAY,GAAG/E,IAAI,CAACqC,MAAM,CAACkB,QAAQ,CAAC,MAAM,CAAC,IAAIvD,IAAI,CAACqC,MAAM,CAACkB,QAAQ,CAAC,MAAM,CAAC;MAEjF,IAAIuB,WAAW,IAAIC,YAAY,EAAE,OAAO,KAAK;MAC7C,IAAI,CAACD,WAAW,IAAI,CAACC,YAAY,EAAE,OAAO,KAAK;IACjD;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA;EACA;EACA,MAAMC,GAAG,GAAIC,YAAY,IAAK;IAC5BX,UAAU,CAAC,KAAK,CAAC;IACjBW,YAAY,CAACnD,OAAO,CAAG9B,IAAI,IAAK;MAC9B,IAAKA,IAAI,CAACsC,QAAQ,EAAG;MAErB,IAAKV,SAAS,CAAC5B,IAAI,CAACe,GAAG,CAAC,IAAIf,IAAI,CAACqC,MAAM,KAAK,MAAM,EAAG;QACnDrC,IAAI,CAACqC,MAAM,GAAG,MAAM;MACtB;MACArC,IAAI,CAACsC,QAAQ,GAAG,IAAI;IACtB,CAAC,CAAC;IACF4B,eAAe,CAAC,kBAAkB,CAAC;EACrC,CAAC;EACD;EACA;EACA;EACA;EACA,MAAMgB,QAAQ,GAAID,YAAY,IAAK;IACjCX,UAAU,CAAC,KAAK,CAAC;IACjBW,YAAY,CAACnD,OAAO,CAAG9B,IAAI,IAAK;MAC9B,IAAK,CAAC4B,SAAS,CAAC5B,IAAI,CAACe,GAAG,CAAC,IAAIf,IAAI,CAACqC,MAAM,KAAK,MAAM,EAAE;QACnDrC,IAAI,CAACqC,MAAM,GAAG,gBAAgB;MAChC;MACA,IAAKT,SAAS,CAAC5B,IAAI,CAACe,GAAG,CAAC,IAAIf,IAAI,CAACqC,MAAM,KAAK,MAAM,EAAE;QAClDrC,IAAI,CAACqC,MAAM,GAAG,MAAM;MACtB;MAEArC,IAAI,CAACsC,QAAQ,GAAG,IAAI;IACtB,CAAC,CAAC;IACF4B,eAAe,CAAC,YAAY,CAAC;EAC/B,CAAC;EACD;EACA;EACA;EACA;EACA,MAAMtE,gCAAgC,GAAII,IAAI,IAAK;IACjD,MAAMmF,SAAS,GAAGrE,sBAAsB,CAACd,IAAI,CAACe,GAAG,EAAEN,KAAK,EAAEO,MAAM,CAAC;IACjE,IAAIoE,iBAAiB,GAAG,CAAC;IAEzBD,SAAS,CAACrD,OAAO,CAAEf,GAAG,IAAK;MACzB,MAAMf,IAAI,GAAGP,IAAI,CAACsB,GAAG,CAAC;MACtB,IAAIf,IAAI,CAACqC,MAAM,KAAK,MAAM,EAAC;QACzB+C,iBAAiB,EAAE;MACrB;IACF,CAAC,CAAC;IAEF,IAAIA,iBAAiB,KAAKpF,IAAI,CAACuC,aAAa,EAAC;MAC3C8C,yBAAyB,CAACrF,IAAI,CAAC;IACjC;EACF,CAAC;EACD,MAAMqF,yBAAyB,GAAIrF,IAAI,IAAK;IAC1C,MAAMmF,SAAS,GAAGrE,sBAAsB,CAACd,IAAI,CAACe,GAAG,EAAEN,KAAK,EAAEO,MAAM,CAAC;IACjEmE,SAAS,CAACrD,OAAO,CAAEf,GAAG,IAAK;MACzB,MAAMf,IAAI,GAAGP,IAAI,CAACsB,GAAG,CAAC;MACtB,IAAIf,IAAI,CAACqC,MAAM,KAAK,QAAQ,EAAC;QAC3B3C,UAAU,CAACM,IAAI,CAAC;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EACD,MAAMN,UAAU,GAAIM,IAAI,IAAK;IAC3B,IAAI0D,UAAU,EAAE;MACdY,UAAU,CAAC,IAAI,CAAC;MAChBX,aAAa,CAAC,KAAK,CAAC;IACtB;IACA,IAAIzB,OAAO,GAAG,CAAC,GAAGzC,IAAI,CAAC;IACvB,IAAImC,SAAS,CAAC5B,IAAI,CAACe,GAAG,CAAC,EAAE;MACvB;MACAmE,QAAQ,CAAChD,OAAO,CAAC;MACjBlC,IAAI,CAACqC,MAAM,GAAG,eAAe;IAC/B,CAAC,MAAM;MACL;MACAH,OAAO,CAAClC,IAAI,CAACe,GAAG,CAAC,CAACsB,MAAM,GAAG,MAAM;MACjC,IAAI,CAACrC,IAAI,CAACuC,aAAa,EAAE;QACvB8C,yBAAyB,CAACrF,IAAI,CAAC;MACjC;IACF;IAEA+D,OAAO,CAAC7B,OAAO,CAAC;IAChB,IAAI2C,WAAW,CAAC,CAAC,EAAC;MAChBG,GAAG,CAAC9C,OAAO,CAAC;IACd;EACF,CAAC;EACD,MAAMvC,QAAQ,GAAIK,IAAI,IAAK;IACzB,IAAIkC,OAAO,GAAG,CAAC,GAAGzC,IAAI,CAAC;IACvB,QAAQO,IAAI,CAACqC,MAAM;MACjB,KAAK,QAAQ;QACXH,OAAO,CAAClC,IAAI,CAACe,GAAG,CAAC,CAACsB,MAAM,GAAG,MAAM;QACjCmC,gBAAgB,CAACc,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAClC;MACF,KAAK,MAAM;QACTpD,OAAO,CAAClC,IAAI,CAACe,GAAG,CAAC,CAACsB,MAAM,GAAG,QAAQ;QACnC;MACF;QACE;IACJ;IACA0B,OAAO,CAAC7B,OAAO,CAAC;EAClB,CAAC;EAED,MAAMqD,cAAc,GAAGA,CAAA,KAAM;IAC3BjB,UAAU,CAAC,KAAK,CAAC;IACjBF,OAAO,CAAC,CAAC,CAAC;IACVT,aAAa,CAAC,IAAI,CAAC;IACnBO,eAAe,CAAC,EAAE,CAAC;IACnB,MAAMjB,YAAY,GAAGL,iBAAiB,CAACC,SAAS,EAAEpC,KAAK,GAACO,MAAM,CAAC;IAC/D,MAAMkB,OAAO,GAAGH,YAAY,CAACtB,KAAK,EAAEO,MAAM,EAAEiC,YAAY,CAAC;IACzDe,YAAY,CAACf,YAAY,CAAC;IAC1Bc,OAAO,CAAC7B,OAAO,CAAC;IAEhB,MAAMsD,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC9C,IAAIF,KAAK,EAAE;MACTA,KAAK,CAACG,KAAK,CAACC,WAAW,CAAC,QAAQ,EAAEnF,KAAK,CAAC;IAC1C;EACF,CAAC;EAED,oBACEpB,OAAA,CAAAE,SAAA;IAAAO,QAAA,gBACET,OAAA;MAAKQ,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrBT,OAAA;QAAAS,QAAA,EAAI;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAEpBhB,OAAA;QAAOwG,OAAO,EAAC,OAAO;QAAA/F,QAAA,EAAC;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACpChB,OAAA;QACEyG,KAAK,EAAErF,KAAM;QACbsF,QAAQ,EAAEC,CAAC,IAAInC,QAAQ,CAACoC,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;QAChDK,IAAI,EAAC,MAAM;QACXlG,EAAE,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAEdhB,OAAA;QAAOwG,OAAO,EAAC,QAAQ;QAAA/F,QAAA,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtChB,OAAA;QACEyG,KAAK,EAAE9E,MAAO;QACd+E,QAAQ,EAAEC,CAAC,IAAIpC,SAAS,CAACqC,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;QACjDK,IAAI,EAAC,MAAM;QACXlG,EAAE,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAEfhB,OAAA;QAAOwG,OAAO,EAAC,WAAW;QAAA/F,QAAA,EAAC;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5ChB,OAAA;QACEyG,KAAK,EAAEjD,SAAU;QACjBkD,QAAQ,EAAEC,CAAC,IAAIlC,YAAY,CAACmC,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;QACpDK,IAAI,EAAC,MAAM;QACXlG,EAAE,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAElBhB,OAAA;QACE+G,OAAO,EAAEb,cAAe;QAAAzF,QAAA,EACvB;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,eAGNhB,OAAA;MAAKQ,SAAS,EAAC,MAAM;MAAAC,QAAA,gBAEnBT,OAAA,CAACF,KAAK;QAACgF,IAAI,EAAEA,IAAK;QAACkC,SAAS,EAAE9B;MAAc;QAAArE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE/ChB,OAAA;QAAKQ,SAAS,EAAC,cAAc;QAAAC,QAAA,EAC1BmE;MAAY;QAAA/D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eACNhB,OAAA,CAACG,IAAI;QACDC,IAAI,EAAEA,IAAK;QACXC,UAAU,EAAEA,UAAW;QACvBC,QAAQ,EAAEA,QAAS;QACnBC,gCAAgC,EAAEA;MAAiC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA,eACN,CAAC;AAEP;AAACoD,EAAA,CA7MQD,GAAG;AAAA8C,GAAA,GAAH9C,GAAG;AA+MZ,eAAeA,GAAG;AAAC,IAAAlD,EAAA,EAAAgG,GAAA;AAAAC,YAAA,CAAAjG,EAAA;AAAAiG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}