{"ast":null,"code":"var _jsxFileName = \"/home/ville/minesweeper/frontend/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport scoreService from './../services/scores';\nimport Leaderboard from \"../components/leaderboard\";\nimport NewGameButton from \"../components/NewGameButton\";\nimport Timer from \"../components/timer\";\nimport GameOverBox from \"../components/GameOverBox\";\nimport Grid from \"../components/grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = parseInt(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst getAdjacentTiles = (grid, tile) => {\n  const neighbors = [];\n  for (let xOff = -1; xOff < 2; ++xOff) {\n    for (let yOff = -1; yOff < 2; ++yOff) {\n      var _grid;\n      const neighbor = (_grid = grid[tile.x + xOff]) === null || _grid === void 0 ? void 0 : _grid[tile.y + yOff];\n      if (neighbor) neighbors.push(neighbor);\n    }\n  }\n  return neighbors;\n};\nconst addAdjacentMineNumbers = grid => {\n  for (const row of grid) {\n    for (const tile of row) {\n      const neighbors = getAdjacentTiles(grid, tile);\n      for (let j = 0; j < neighbors.length; ++j) {\n        if (neighbors[j].isMine) tile.adjacentMines++;\n      }\n    }\n  }\n};\nconst addMinesToGrid = (grid, mineCount) => {\n  const gridlen = grid.length * grid[0].length;\n  if (mineCount > gridlen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridlen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  for (const idx of mineIndexes) {\n    const {\n      x,\n      y\n    } = getXYfromIndex(idx, grid.length);\n    grid[x][y].isMine = true;\n  }\n};\nconst generateGrid = (wid, hgt) => {\n  let newGrid = [];\n  for (let x = 0; x < hgt; ++x) {\n    const row = [];\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid * x;\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false\n      };\n      row.push(tile);\n    }\n    newGrid.push(row);\n  }\n  return newGrid;\n};\nexport default function Game() {\n  _s();\n  const [topScores, gridDimensions] = useLoaderData();\n  // const topScores = [{username:'asd', time:123, id: '123123'}]\n  // const gridDimensions = {\n  //   width:2,\n  //   height:2,\n  //   mineCount: 1\n  // }\n\n  const [firstClick, setFirstClick] = useState(true);\n  const [grid, setGrid] = useState([[]]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(gridDimensions.mineCount);\n\n  // eslint-disable-next-line\n  useEffect(() => initializeGrid(), []);\n\n  // Handle clock\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Memory leak preventation?\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid) {\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n        if (tile.isMine && tileIsOpened) return false;\n        if (!tile.isMine && !tileIsOpened) return false;\n      }\n    }\n    return true;\n  };\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false);\n    editableGrid.forEach(row => {\n      row.forEach(tile => {\n        if (!tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect';\n        }\n        if (tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine';\n        }\n        tile.disabled = true;\n      });\n    });\n    setGameOverText(text);\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    neighbors.forEach(tile => {\n      if (tile.status === 'hidden') revealTile(tile);\n    });\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    let neighbouringFlags = 0;\n    neighbors.forEach(tile => {\n      if (tile.status === 'flag') neighbouringFlags++;\n    });\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const handleFirstClick = () => {\n    setFirstClick(false);\n    setTimerOn(true);\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      handleFirstClick();\n    }\n    let newGrid = [...grid];\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!');\n      newGrid[tile.x][tile.y].status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open';\n      if (tile.adjacentMines < 1) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      gameOver(newGrid, 'Congratulations!');\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden';\n        setMinesLeftText(prev => prev + 1);\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    setMinesLeftText(gridDimensions.mineCount);\n    const newGrid = generateGrid(gridDimensions.width, gridDimensions.height);\n    addMinesToGrid(newGrid, gridDimensions.mineCount);\n    addAdjacentMineNumbers(newGrid, gridDimensions.width);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--boardWidth', gridDimensions.width);\n    }\n  };\n  const saveScore = event => {\n    event.preventDefault();\n\n    // switch(difficulty){\n    //   case 'BEGINNER':\n    //     scoreService.createBeginner({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'INTERMEDIATE':\n    //     scoreService.createIntermediate({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log('Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'EXTREME':\n    //     scoreService.createExtreme({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   default:\n    //     break\n    // }\n\n    setGameOverText('');\n    event.target.username.value = '';\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Leaderboard, {\n      scores: topScores\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewGameButton, {\n      initializeGrid: initializeGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      time: time,\n      minesLeft: minesLeftText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameOverBox, {\n      text: gameOverText,\n      functions: [initializeGrid, saveScore]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      functions: [revealTile, flagTile, checkFlagsAndRevealAdjacentTiles]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"nO0mzB9zuNnIMbSMpwP+fej4L1o=\", false, function () {\n  return [useLoaderData];\n});\n_c = Game;\nexport const scoreLoader = async ({\n  params\n}) => {\n  const {\n    difficulty\n  } = params;\n  const fastestFirst = (a, b) => a.time - b.time;\n  let score = [];\n  let gridDimensions = {\n    width: 2,\n    height: 2,\n    mineCount: 1\n  };\n  switch (difficulty) {\n    case 'beginner':\n      score = await scoreService.getBeginner().then(scores => {\n        scores.sort(fastestFirst);\n        return scores;\n      });\n      gridDimensions = {\n        width: 9,\n        height: 9,\n        mineCount: 10\n      };\n      return [score, gridDimensions];\n    case 'intermediate':\n      score = await scoreService.getIntermediate().then(scores => {\n        scores.sort(fastestFirst);\n        return scores;\n      });\n      gridDimensions = {\n        width: 16,\n        height: 16,\n        mineCount: 40\n      };\n      return [score, gridDimensions];\n    default:\n      break;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useLoaderData","useState","useEffect","scoreService","Leaderboard","NewGameButton","Timer","GameOverBox","Grid","jsxDEV","_jsxDEV","Fragment","_Fragment","getXYfromIndex","index","width","x","y","parseInt","randInt","min","max","Math","floor","random","getAdjacentTiles","grid","tile","neighbors","xOff","yOff","_grid","neighbor","push","addAdjacentMineNumbers","row","j","length","isMine","adjacentMines","addMinesToGrid","mineCount","gridlen","console","log","mineIndexes","randomNumber","includes","idx","generateGrid","wid","hgt","newGrid","id","status","disabled","Game","_s","topScores","gridDimensions","firstClick","setFirstClick","setGrid","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","initializeGrid","interval","setInterval","prevTime","clearInterval","checkForWin","tileIsOpened","gameOver","editableGrid","text","forEach","revealAdjacentHiddenTiles","revealTile","checkFlagsAndRevealAdjacentTiles","neighbouringFlags","handleFirstClick","flagTile","prev","height","board","document","querySelector","style","setProperty","saveScore","event","preventDefault","target","username","value","children","scores","fileName","_jsxFileName","lineNumber","columnNumber","minesLeft","functions","_c","scoreLoader","params","difficulty","fastestFirst","a","b","score","getBeginner","then","sort","getIntermediate","$RefreshReg$"],"sources":["/home/ville/minesweeper/frontend/src/pages/Game.js"],"sourcesContent":["import { useLoaderData } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport scoreService from './../services/scores'\nimport Leaderboard from \"../components/leaderboard\";\nimport NewGameButton from \"../components/NewGameButton\";\nimport Timer from \"../components/timer\";\nimport GameOverBox from \"../components/GameOverBox\";\nimport Grid from \"../components/grid\";\n\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = parseInt(index/width)\n  return { x, y }\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst getAdjacentTiles = (grid, tile)  => {\n  const neighbors = []\n  for (let xOff = -1; xOff < 2; ++xOff){\n    for (let yOff = -1; yOff < 2; ++yOff){\n      const neighbor = grid[tile.x + xOff]?.[tile.y + yOff]\n      if (neighbor) neighbors.push(neighbor)\n    } \n  }\n  return neighbors\n}\nconst addAdjacentMineNumbers = (grid) => {\n  for ( const row of grid ) {\n    for ( const tile of row ) {\n      const neighbors = getAdjacentTiles(grid, tile)\n      for (let j = 0; j<neighbors.length; ++j) {\n        if (neighbors[j].isMine) tile.adjacentMines++\n      }\n    }\n  }\n}\nconst addMinesToGrid = (grid, mineCount) => {\n  const gridlen = grid.length * grid[0].length\n  if ( mineCount > gridlen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridlen)\n\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  for (const idx of mineIndexes) {\n    const {x, y} = getXYfromIndex(idx, grid.length)\n    grid[x][y].isMine = true\n  }\n}\nconst generateGrid = (wid, hgt) => {\n  let newGrid = []\n  for (let x = 0; x < hgt; ++x){\n    const row = []\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid*x\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false,\n      }\n      row.push(tile)\n    }\n    newGrid.push(row)\n  }\n  return newGrid\n}\nexport default function Game() {\n  const [topScores, gridDimensions] = useLoaderData()\n  // const topScores = [{username:'asd', time:123, id: '123123'}]\n  // const gridDimensions = {\n  //   width:2,\n  //   height:2,\n  //   mineCount: 1\n  // }\n\n\n  const [firstClick, setFirstClick] = useState(true)\n  const [grid, setGrid] = useState([[]])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(gridDimensions.mineCount)\n\n  // eslint-disable-next-line\n  useEffect(() => initializeGrid(), [])  \n\n  // Handle clock\n  useEffect(() => {\n    let interval = null\n    \n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval) // Memory leak preventation?\n  }, [timerOn])\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid){\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n        if (tile.isMine && tileIsOpened) return false\n        if (!tile.isMine && !tileIsOpened) return false\n      }\n    }\n    return true\n  }\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false)\n    editableGrid.forEach((row) => {\n      row.forEach( (tile) => {\n        if ( !tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect'\n        }\n        if ( tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine'\n        }\n        \n        tile.disabled = true\n      })\n    })\n    setGameOverText(text)\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n\n    neighbors.forEach(tile => {\n      if (tile.status === 'hidden') revealTile(tile)\n    })\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    let neighbouringFlags = 0\n    \n    neighbors.forEach(tile => {\n      if (tile.status === 'flag') neighbouringFlags++\n    })\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const handleFirstClick = () => {\n    setFirstClick(false)\n    setTimerOn(true)\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      handleFirstClick()\n    }\n\n    let newGrid = [...grid]\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!')\n      newGrid[tile.x][tile.y].status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open'\n      if (tile.adjacentMines < 1) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      gameOver(newGrid, 'Congratulations!')\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden'\n        setMinesLeftText(prev => prev + 1)\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0)\n    setFirstClick(true)\n    setGameOverText('')\n    setMinesLeftText(gridDimensions.mineCount)\n    const newGrid = generateGrid(gridDimensions.width, gridDimensions.height)\n    addMinesToGrid(newGrid, gridDimensions.mineCount)\n    addAdjacentMineNumbers(newGrid, gridDimensions.width)\n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--boardWidth', gridDimensions.width)\n    }\n  }\n  \n  const saveScore = ( event ) => {\n    event.preventDefault()\n\n    // switch(difficulty){\n    //   case 'BEGINNER':\n    //     scoreService.createBeginner({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'INTERMEDIATE':\n    //     scoreService.createIntermediate({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log('Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'EXTREME':\n    //     scoreService.createExtreme({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   default:\n    //     break\n    // }\n\n    setGameOverText('')\n    event.target.username.value = ''\n  }\n\n  return (\n    <>\n      <Leaderboard scores={topScores}/>\n      <NewGameButton initializeGrid={initializeGrid}/>\n      <Timer time={time} minesLeft={minesLeftText} />\n\n      <GameOverBox\n        text={gameOverText}\n        functions={[\n          initializeGrid,\n          saveScore\n        ]} />\n      <Grid\n        grid={grid}\n        functions={\n          [ revealTile,\n            flagTile,\n            checkFlagsAndRevealAdjacentTiles ]}\n      />\n    </>\n  )\n}\n\nexport const scoreLoader = async ({ params }) => {\n  const { difficulty } = params\n\n  const fastestFirst = (a, b) => a.time - b.time\n  let score = [];\n  let gridDimensions = {\n    width: 2,\n    height: 2,\n    mineCount: 1\n  }\n\n  switch (difficulty) {\n    case 'beginner':\n      score = await scoreService.getBeginner()\n        .then(scores => {\n          scores.sort(fastestFirst)\n          return scores\n        })\n      gridDimensions = {\n        width: 9,\n        height: 9,\n        mineCount: 10\n      }\n      return [score, gridDimensions]\n\n    case 'intermediate':\n      score = await scoreService.getIntermediate()\n        .then(scores => {\n          scores.sort(fastestFirst)\n          return scores\n        })\n      gridDimensions = {\n        width: 16,\n        height: 16,\n        mineCount: 40\n      }\n      return [score, gridDimensions]\n\n    default:\n      break\n    \n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}