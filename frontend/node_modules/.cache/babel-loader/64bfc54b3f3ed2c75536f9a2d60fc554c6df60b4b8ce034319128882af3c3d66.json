{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst generateGrid = (width, height, handleClick) => {\n  let grid = [];\n  for (let i = 0; i < height; ++i) {\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`;\n      let idx = i * width + j;\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square hidden \" + id,\n        onClick: () => handleClick(idx, id)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this));\n    }\n  }\n  return grid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMineField = (minesCount, gridLen) => {\n  if (minesCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let mineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < minesCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => mineField[idx] = true);\n  return mineField;\n};\nfunction App() {\n  _s();\n  const [width] = useState(3); // setWidth\n  const [height] = useState(4); // setHeight\n  const minesCount = 3;\n  const mineField = generateMineField(minesCount, width * height);\n  const handleClick = (idx, id) => {\n    var element = document.getElementsByClassName(id);\n    console.log('element.classList', element.classList);\n    // if (mineField[idx]) {\n    //   //end game\n    //   element.classList.remove('hidden')\n    //   element.classList.add('mine')\n    // } else {\n    //   // reveal number / empty\n    //   element.classList.remove('hidden')\n    //   element.classList.add('open')\n    // }\n  };\n\n  const grid = generateGrid(width, height, handleClick);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${width}, auto)`\n      },\n      children: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"fvV4ajy/cm+EWeOfWgCjH+H9I8o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","generateGrid","width","height","handleClick","grid","i","j","id","idx","push","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","randInt","min","max","Math","floor","random","generateMineField","minesCount","gridLen","console","log","mineField","Array","fill","mineIndexes","length","randomNumber","includes","forEach","App","_s","element","document","getElementsByClassName","classList","children","style","gridTemplateColumns","_c","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState } from 'react'\n\nconst generateGrid = (width, height, handleClick) => {\n  let grid = []\n\n  for (let i = 0; i < height; ++i){\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`\n      let idx = i*width + j\n      grid.push(<div key={id} className={\"square hidden \"+id} onClick={() => handleClick(idx, id)}></div>)\n    }\n  }\n  return grid\n}\n\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst generateMineField = (minesCount, gridLen) => {\n  if ( minesCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let mineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < minesCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => mineField[idx] = true)\n  return mineField\n}\n\nfunction App() {\n  const [width] = useState(3)   // setWidth\n  const [height] = useState(4)  // setHeight\n  const minesCount = 3\n\n  const mineField = generateMineField(minesCount, width*height)\n  \n  const handleClick = (idx, id) => {\n    var element = document.getElementsByClassName(id)\n    console.log('element.classList', element.classList)\n    // if (mineField[idx]) {\n    //   //end game\n    //   element.classList.remove('hidden')\n    //   element.classList.add('mine')\n    // } else {\n    //   // reveal number / empty\n    //   element.classList.remove('hidden')\n    //   element.classList.add('open')\n    // }\n  }\n  const grid = generateGrid(width, height, handleClick)\n  \n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n      </div>\n\n      <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n        { grid }\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}