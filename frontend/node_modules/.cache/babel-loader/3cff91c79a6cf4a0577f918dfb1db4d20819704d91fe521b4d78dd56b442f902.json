{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport Tile from './components/tile.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  grid,\n  width,\n  revealTile,\n  flagTile\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: {\n      gridTemplateColumns: `repeat(${width}, auto)`\n    },\n    children: grid.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n      revealTile: revealTile,\n      flagTile: flagTile,\n      tile: tile\n    }, tile.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n};\n_c = Grid;\nconst getAdjacentMineCount = (x, y, idx, mineField, width, height) => {\n  let count = 0;\n  if (mineField[idx]) return 0;\n  const topL = idx - (wid + 1);\n  const top = idx - wid;\n  const topR = idx - (wid - 1);\n  const L = idx - 1;\n  const R = idx + 1;\n  const botL = idx + (wid - 1);\n  const bot = idx + wid;\n  const botR = idx + (wid + 1);\n  const neighborIndexes = [];\n  if (x === 0) {\n    if (y === 0) {\n      neighborIndexes.push(R, bot, botR); // left top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(R, top, topR); // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR); // left side\n    }\n  } else if (x === wid - 1) {\n    if (y === 0) {\n      neighborIndexes.push(L, bot, botL); // right top corner\n    } else if (y === height - 1) {\n      neighborIndexes.push(L, top, topL); // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL); // right side\n    }\n  } else if (y === 0) {\n    neighborIndexes.push(L, botL, bot, botR, R); // top\n  } else if (y === height - 1) {\n    neighborIndexes.push(L, topL, top, topR, R); // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR); // middle\n  }\n\n  neighborIndexes.forEach(idx => {\n    if (mineField[idx]) {\n      count++;\n    }\n  });\n  return count > 0 ? count : null;\n};\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = [];\n  for (let i = 0; i < hgt; ++i) {\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid * i;\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        x: j,\n        y: i,\n        status: 'hidden',\n        adjacentMines: getAdjacentMineCount(j, i, idx, mineField, wid, hgt)\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nfunction App() {\n  _s();\n  const [height, setHeight] = useState(3);\n  const [width, setWidth] = useState(4);\n  const [mineCount, setMineCount] = useState(2);\n  const [grid, setGrid] = useState([]);\n  const [mineField, setMineField] = useState([]);\n  const [gameOverText, setGameOverText] = useState('');\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid) {\n      const tileHasMine = mineField[tile.idx];\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n      if (tileHasMine && tileIsOpened) return false;\n      if (!tileHasMine && !tileIsOpened) return false;\n    }\n    return true;\n  };\n\n  // Call this when game is won:\n  // 1. Mark flagged mines as correct\n  // 2. Disable all tiles\n  const win = editableGrid => {\n    editableGrid.forEach(tile => {\n      if (tile.status.includes('disabled')) return;\n      if (mineField[tile.idx]) {\n        tile.status = 'correct';\n      }\n      tile.status = tile.status + ' disabled';\n    });\n    setGameOverText('Congratulations!');\n  };\n  // Call when game is lost\n  // 1. Mark correct flags as correct\n  // 2. Mark wrong flags as wrong (TODO)\n  // 3. Reveal all mines\n  // 3. Disable all tiles\n  const gameOver = editableGrid => {\n    editableGrid.forEach(tile => {\n      if (tile.status.includes('disabled')) return;\n      if (mineField[tile.idx]) {\n        tile.status = tile.status === 'flag' ? 'correct' : 'mine';\n      }\n      tile.status = tile.status + ' disabled';\n    });\n    setGameOverText('Game over!');\n  };\n  const revealTile = tile => {\n    let newGrid = [...grid];\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid, 'Game Over!');\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open';\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      win(newGrid);\n    }\n  };\n\n  // JOS MUUTTAA width; NIIN HOMMA MENEE PASKAKS?!?!? MIKS\n\n  const createEmptyGrid = () => {\n    setGameOverText('');\n    console.log('createEmptyGrid:', typeof width);\n    const newMineField = generateMineField(mineCount, width * height);\n    const newGrid = generateGrid(width, height, newMineField);\n    setMineField(newMineField);\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: e => setWidth(Number(e.target.value)),\n        type: \"text\",\n        id: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: height,\n        onChange: e => setHeight(Number(e.target.value)),\n        type: \"text\",\n        id: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"mineCount\",\n        children: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: mineCount,\n        onChange: e => setMineCount(Number(e.target.value)),\n        type: \"text\",\n        id: \"mineCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createEmptyGrid,\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        width: width,\n        revealTile: revealTile,\n        flagTile: flagTile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"52YyHeouYlHFymOItKpZu0ueqBI=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","Tile","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","grid","width","revealTile","flagTile","className","style","gridTemplateColumns","children","map","tile","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","getAdjacentMineCount","x","y","idx","mineField","height","count","topL","wid","top","topR","L","R","botL","bot","botR","neighborIndexes","push","forEach","generateGrid","hgt","newGrid","i","j","status","adjacentMines","randInt","min","max","Math","floor","random","generateMineField","mineCount","gridLen","console","log","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","App","_s","setHeight","setWidth","setMineCount","setGrid","setMineField","gameOverText","setGameOverText","checkForWin","tileHasMine","tileIsOpened","win","editableGrid","gameOver","createEmptyGrid","htmlFor","value","onChange","e","Number","target","type","onClick","_c2","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState  } from 'react'\nimport Tile from './components/tile.js'\n\nconst Grid = ({ grid, width, revealTile, flagTile }) => {\n  return (\n  <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n    {grid.map( tile =>\n      <Tile \n        key={tile.id}\n        revealTile={ revealTile }\n        flagTile={flagTile}\n        tile={tile} />\n    )}\n  </div>\n)}\n\nconst getAdjacentMineCount = (x, y, idx, mineField, width, height) => {\n  let count = 0\n  if (mineField[idx]) return 0\n\n  const topL = idx - (wid + 1)\n  const top = idx - wid\n  const topR = idx - (wid - 1)\n  const L = idx - 1\n  const R = idx + 1\n  const botL = idx + (wid - 1)\n  const bot= idx + wid\n  const botR = idx + (wid + 1)\n  const neighborIndexes = []\n\n  if (x === 0){\n    if (y === 0){\n      neighborIndexes.push(R, bot, botR)     // left top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(R, top, topR)     // left bot corner\n    } else {\n      neighborIndexes.push(top, topR, R, bot, botR)   // left side\n    }\n  } else if (x === wid - 1){\n    if (y === 0){\n      neighborIndexes.push(L, bot, botL)    // right top corner\n    } else if (y === height - 1){\n      neighborIndexes.push(L, top, topL)    // right bot corner\n    } else {\n      neighborIndexes.push(top, topL, L, bot, botL)   // right side\n    }\n  } else if (y === 0){\n    neighborIndexes.push(L, botL, bot, botR, R)   // top\n  } else if (y === height - 1){\n    neighborIndexes.push(L, topL, top, topR, R)   // bot\n  } else {\n    neighborIndexes.push(topL, top, topR, L, R, botL, bot, botR)    // middle\n  }\n\n  neighborIndexes.forEach((idx) => {\n    if (mineField[idx]) {\n      count++\n    }\n  })\n\n  return (count > 0) ? count : null\n}\n\nconst generateGrid = (wid, hgt, mineField) => {\n  let newGrid = []\n  for (let i = 0; i < hgt; ++i){\n    for (let j = 0; j < wid; ++j) {\n      const idx = j + wid*i\n      const tile = {\n        id: `${i}_${j}`,\n        idx: idx,\n        x: j,\n        y: i,\n        status: 'hidden',\n        adjacentMines: getAdjacentMineCount(j, i, idx, mineField, wid, hgt)\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nfunction App() {\n  const [height, setHeight] = useState(3)\n  const [width, setWidth] = useState(4)\n  const [mineCount, setMineCount] = useState(2)\n  \n  const [grid, setGrid] = useState([])\n  const [mineField, setMineField] = useState([])\n  const [gameOverText, setGameOverText] = useState('')\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        break\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n    \n  }\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const tile of grid){\n      const tileHasMine = mineField[tile.idx]\n      const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n      if (tileHasMine && tileIsOpened) return false\n      if (!tileHasMine && !tileIsOpened) return false\n    }\n    return true\n  }\n\n  // Call this when game is won:\n  // 1. Mark flagged mines as correct\n  // 2. Disable all tiles\n  const win = (editableGrid) => {\n    editableGrid.forEach( (tile) => {\n      if (tile.status.includes('disabled') ) return\n\n      if ( mineField[tile.idx] ) {\n        tile.status = 'correct' \n      }\n      tile.status = tile.status + ' disabled'\n    })\n    setGameOverText('Congratulations!')\n  }\n  // Call when game is lost\n  // 1. Mark correct flags as correct\n  // 2. Mark wrong flags as wrong (TODO)\n  // 3. Reveal all mines\n  // 3. Disable all tiles\n  const gameOver = (editableGrid) => {\n    editableGrid.forEach( (tile) => {\n      if (tile.status.includes('disabled') ) return\n\n      if ( mineField[tile.idx] ) {\n        tile.status = (tile.status === 'flag') ?\n        'correct' : 'mine'\n      }\n      tile.status = tile.status + ' disabled'\n    })\n    setGameOverText('Game over!')\n  }\n\n  const revealTile = (tile) => {\n    let newGrid = [...grid]\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid, 'Game Over!')\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open'\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      win(newGrid)\n    }\n  }\n\n\n  // JOS MUUTTAA width; NIIN HOMMA MENEE PASKAKS?!?!? MIKS\n\n  const createEmptyGrid = () => {\n    setGameOverText('')\n    console.log('createEmptyGrid:', typeof(width))\n    const newMineField = generateMineField(mineCount, width*height)\n    const newGrid = generateGrid(width, height, newMineField)\n    setMineField(newMineField)\n    setGrid(newGrid)\n  }\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n\n        <label htmlFor=\"width\">width</label>\n        <input\n          value={width}\n          onChange={e => setWidth(Number(e.target.value))}\n          type=\"text\"\n          id=\"width\"/>\n\n        <label htmlFor=\"height\">height</label>\n        <input\n          value={height}\n          onChange={e => setHeight(Number(e.target.value))}\n          type=\"text\"\n          id=\"height\"/>\n\n        <label htmlFor=\"mineCount\">mineCount</label>\n        <input\n          value={mineCount}\n          onChange={e => setMineCount(Number(e.target.value))}\n          type=\"text\"\n          id=\"mineCount\"/>\n\n        <button\n          onClick={createEmptyGrid}\n          > New Game </button>\n      </div>\n\n\n      <div className=\"body\">\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid\n            grid={grid}\n            width={width}\n            revealTile={revealTile}\n            flagTile={flagTile}\n          />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}