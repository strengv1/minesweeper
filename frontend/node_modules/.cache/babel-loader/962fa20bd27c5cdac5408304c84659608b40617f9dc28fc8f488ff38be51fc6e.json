{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Square = ({\n  handleClick,\n  id,\n  classes\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: classes,\n  id: id,\n  onClick: handleClick,\n  onContextMenu: handleClick\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n_c = Square;\nconst Grid = ({\n  grid,\n  width,\n  handleClick\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"grid\",\n  style: {\n    gridTemplateColumns: `repeat(${width}, auto)`\n  },\n  children: grid.map(square => /*#__PURE__*/_jsxDEV(Square, {\n    handleClick: handleClick,\n    id: square.id,\n    classes: square.classes\n  }, square.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this);\n_c2 = Grid;\nconst generateGrid = (width, height) => {\n  let g = [];\n  for (let i = 0; i < height; ++i) {\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`;\n      g.push({\n        id: id,\n        classes: \"square hidden\"\n      });\n    }\n  }\n  return g;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n// Returns a boolean array with length of gridLen, with mineCount trues \nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nconst indexFromId = (id, width) => {\n  const parts = id.split('_');\n  return parseInt(parts[0]) * width + parseInt(parts[1]);\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [mineField, setMineField] = useState([]);\n  const [width, setWidth] = useState(4);\n  const [height, setHeight] = useState(5);\n  const [mineCount, setMineCount] = useState(3);\n  const handleClick = e => {\n    e.preventDefault();\n    const checkForMine = () => {\n      if (mineField[idx]) {\n        //end game\n        classList.add('mine');\n      } else {\n        // reveal number / empty\n        classList.add('open');\n      }\n    };\n    var square = e.target;\n    var classList = square.classList;\n    var idx = indexFromId(square.id, width);\n    switch (true) {\n      // LEFT CLICK:\n      case e.type === 'click' && classList.contains('hidden'):\n        classList.remove('hidden');\n        checkForMine();\n        break;\n      // RIGHT CLICK:\n      case e.type === 'contextmenu' && classList.contains('hidden'):\n        classList.remove('hidden');\n        classList.add('flag');\n        break;\n      case e.type === 'contextmenu' && classList.contains('flag'):\n        classList.remove('flag');\n        classList.add('hidden');\n        break;\n      default:\n        break;\n    }\n  };\n  const createEmptyGrid = () => {\n    const newGrid = generateGrid(width, height);\n    setGrid(newGrid);\n    const newMineField = generateMineField(mineCount, width * height);\n    setMineField(newMineField);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: e => setWidth(e.target.value),\n        type: \"text\",\n        id: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: height,\n        onChange: e => setHeight(e.target.value),\n        type: \"text\",\n        id: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          createEmptyGrid();\n        },\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      width: width,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"miDmxzacuRQFXB+H8NivsF2Cn6w=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","handleClick","id","classes","className","onClick","onContextMenu","fileName","_jsxFileName","lineNumber","columnNumber","_c","Grid","grid","width","style","gridTemplateColumns","children","map","square","_c2","generateGrid","height","g","i","j","push","randInt","min","max","Math","floor","random","generateMineField","mineCount","gridLen","console","log","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","forEach","idx","indexFromId","parts","split","parseInt","App","_s","setGrid","mineField","setMineField","setWidth","setHeight","setMineCount","e","preventDefault","checkForMine","classList","add","target","type","contains","remove","createEmptyGrid","newGrid","htmlFor","value","onChange","_c3","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState } from 'react'\n\nconst Square = ({handleClick, id, classes}) => ( \n  <div \n    className={classes} \n    id={id}\n    onClick={handleClick} \n    onContextMenu={handleClick}/> \n)\n\nconst Grid = ({ grid, width, handleClick }) => (\n  <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n    {grid.map( square => \n      <Square key={square.id}\n        handleClick={ handleClick }\n        id={square.id}\n        classes={square.classes} />\n    )}\n  </div>\n)\n\nconst generateGrid = (width, height) => {\n  let g = []\n\n  for (let i = 0; i < height; ++i){\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`\n      g.push({\n        id: id,\n        classes: \"square hidden\"\n      })\n    }\n  }\n  return g\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n// Returns a boolean array with length of gridLen, with mineCount trues \nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nconst indexFromId = (id, width) => {\n  const parts = id.split('_')\n  return parseInt(parts[0])*width + parseInt(parts[1])\n}\n\n\nfunction App() {\n  const [grid, setGrid] = useState([])\n  const [mineField, setMineField] = useState([])\n  const [width, setWidth] = useState(4)\n  const [height, setHeight] = useState(5)\n  const [mineCount, setMineCount] = useState(3)\n  \n  const handleClick = (e) => {\n    e.preventDefault()\n    \n    const checkForMine = () => {\n      if (mineField[idx]) {\n        //end game\n        classList.add('mine')\n      } else {\n        // reveal number / empty\n        classList.add('open')\n      }\n    }\n    var square = e.target\n    var classList = square.classList\n    var idx = indexFromId(square.id, width)\n    switch (true){\n      // LEFT CLICK:\n      case ((e.type === 'click') && classList.contains('hidden')):\n        classList.remove('hidden')\n        checkForMine()\n        break\n      // RIGHT CLICK:\n      case ((e.type === 'contextmenu') && classList.contains('hidden')):\n        classList.remove('hidden')\n        classList.add('flag')\n        break\n      case ((e.type ==='contextmenu') && classList.contains('flag')):\n        classList.remove('flag')\n        classList.add('hidden')  \n        break\n      default:\n        break\n    }\n  \n  }\n  \n  const createEmptyGrid = () => {\n    const newGrid = generateGrid(width, height)\n    setGrid(newGrid)\n    \n    const newMineField = generateMineField(mineCount, width*height)\n    setMineField(newMineField)\n  }\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n        <label htmlFor=\"width\">width</label>\n        <input\n          value={width}\n          onChange={e => setWidth(e.target.value)}\n          type=\"text\"\n          id=\"width\"\n        />\n        <label htmlFor=\"height\">height</label>\n        <input\n          value={height}\n          onChange={e => setHeight(e.target.value)}\n          type=\"text\"\n          id=\"height\"/>\n        <button\n          onClick={(e) => {createEmptyGrid()}}\n          > New Game </button>\n      </div>\n\n      <Grid grid={grid} width={width} handleClick={handleClick}/>\n\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}