{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst generateGrid = (width, height, reveal) => {\n  let grid = [];\n  for (let i = 0; i < height; ++i) {\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`;\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square \" + id,\n        onClick: () => reveal(id)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this));\n    }\n  }\n  return grid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst generateMines = (mineField, minesCount, setMines) => {\n  if (minesCount > mineField.length) {\n    console.log('too many mines!');\n    return -1;\n  }\n  let minesleft = minesCount;\n  while (minesleft > 0) {\n    let idx = randInt(0, mineField.length - 1);\n\n    // If there is no mine in that spot, plant a mine. otherwise get a new number\n    if (!mineField[idx]) {\n      mineField[idx] = true;\n      minesleft -= 1;\n    }\n  }\n};\nfunction App() {\n  _s();\n  const [width] = useState(3); // setWidth\n  const [height] = useState(4); // setHeight\n  const minesCount = 2;\n  const reveal = id => {\n    // Remove \"hidden\", add \"open\" from square with id=id!\n  };\n  const grid = generateGrid(width, height, reveal);\n  const [mineField, setMines] = useState(new Array(grid.length).fill(false));\n  generateMines(mineField, minesCount, setMines);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${width}, auto)`\n      },\n      children: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"xxSo401X6f6YvPiJkcfaA54/QwA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","generateGrid","width","height","reveal","grid","i","j","id","push","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","randInt","min","max","Math","floor","random","generateMines","mineField","minesCount","setMines","length","console","log","minesleft","idx","App","_s","Array","fill","children","style","gridTemplateColumns","_c","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState } from 'react'\n\nconst generateGrid = (width, height, reveal) => {\n  let grid = []\n  for (let i = 0; i < height; ++i){\n    for (let j = 0; j < width; ++j) {\n      let id = `${i}_${j}`\n      grid.push(<div key={id} className={\"square \"+id} onClick={() => reveal(id)}></div>)\n    }\n  }\n  return grid\n}\n\n\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst generateMines = (mineField, minesCount, setMines) => {\n  if (minesCount > mineField.length) { \n    console.log('too many mines!')\n    return -1\n  }\n\n  let minesleft = minesCount\n  while (minesleft > 0) {\n    let idx = randInt(0, mineField.length - 1)\n\n    // If there is no mine in that spot, plant a mine. otherwise get a new number\n    if ( !mineField[idx] ) {\n      \n      \n      mineField[idx] = true\n      minesleft -= 1\n    }\n  }\n}\n\nfunction App() {\n  const [width] = useState(3)   // setWidth\n  const [height] = useState(4)  // setHeight\n  const minesCount = 2\n  \n  const reveal = id => {\n    // Remove \"hidden\", add \"open\" from square with id=id!\n  }\n\n  const grid = generateGrid(width, height, reveal)\n  const [mineField, setMines] = useState(\n    new Array(grid.length).fill(false)\n  )\n\n  generateMines(mineField, minesCount, setMines)\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n      </div>\n\n      <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n        { grid }\n      </div>\n  \n\n\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}