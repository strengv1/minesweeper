{"ast":null,"code":"var _jsxFileName = \"/home/ville/minesweeper/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// import scoreService from './services/scores'\nimport DifficultyBar from './components/DifficultyBar.js';\nimport Beginner from './components/Beginner.js';\nimport Intermediate from './components/Intermediate.js';\nimport Grid from './components/grid.js';\nimport Timer from './components/timer.js';\nimport GameOverBox from './components/GameOverBox.js';\nimport { Route, Routes } from 'react-router-dom';\nimport './styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getXYfromIndex = (index, width) => {\n  const x = index % width;\n  const y = parseInt(index / width);\n  return {\n    x,\n    y\n  };\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nconst getAdjacentTiles = (grid, tile) => {\n  const neighbors = [];\n  for (let xOff = -1; xOff < 2; ++xOff) {\n    for (let yOff = -1; yOff < 2; ++yOff) {\n      var _grid;\n      const neighbor = (_grid = grid[tile.x + xOff]) === null || _grid === void 0 ? void 0 : _grid[tile.y + yOff];\n      if (neighbor) neighbors.push(neighbor);\n    }\n  }\n  return neighbors;\n};\nconst addAdjacentMineNumbers = grid => {\n  for (const row of grid) {\n    for (const tile of row) {\n      const neighbors = getAdjacentTiles(grid, tile);\n      for (let j = 0; j < neighbors.length; ++j) {\n        if (neighbors[j].isMine) tile.adjacentMines++;\n      }\n    }\n  }\n};\nconst addMinesToGrid = (grid, mineCount) => {\n  const gridlen = grid.length * grid[0].length;\n  if (mineCount > gridlen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridlen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  for (const idx of mineIndexes) {\n    const {\n      x,\n      y\n    } = getXYfromIndex(idx, grid.length);\n    grid[x][y].isMine = true;\n  }\n};\nconst generateGrid = (wid, hgt) => {\n  let newGrid = [];\n  for (let x = 0; x < hgt; ++x) {\n    const row = [];\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid * x;\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false\n      };\n      row.push(tile);\n    }\n    newGrid.push(row);\n  }\n  return newGrid;\n};\nfunction App() {\n  _s();\n  const [firstClick, setFirstClick] = useState(true);\n  const [height, setHeight] = useState(9);\n  const [width, setWidth] = useState(9);\n  const [mineCount, setMineCount] = useState(10);\n  const [grid, setGrid] = useState([[]]);\n  const [gameOverText, setGameOverText] = useState('');\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(0);\n  const [minesLeftText, setMinesLeftText] = useState(mineCount);\n\n  // eslint-disable-next-line\n  useEffect(() => initializeGrid(), []);\n  useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval); // Memory leak preventation?\n  }, [timerOn]);\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid) {\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine');\n        if (tile.isMine && tileIsOpened) return false;\n        if (!tile.isMine && !tileIsOpened) return false;\n      }\n    }\n    return true;\n  };\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false);\n    editableGrid.forEach(row => {\n      row.forEach(tile => {\n        if (!tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect';\n        }\n        if (tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine';\n        }\n        tile.disabled = true;\n      });\n    });\n    setGameOverText(text);\n  };\n  const revealAdjacentHiddenTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    neighbors.forEach(tile => {\n      if (tile.status === 'hidden') revealTile(tile);\n    });\n  };\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = tile => {\n    const neighbors = getAdjacentTiles(grid, tile);\n    let neighbouringFlags = 0;\n    neighbors.forEach(tile => {\n      if (tile.status === 'flag') neighbouringFlags++;\n    });\n    if (neighbouringFlags === tile.adjacentMines) {\n      revealAdjacentHiddenTiles(tile);\n    }\n  };\n  const handleFirstClick = () => {\n    setFirstClick(false);\n    setTimerOn(true);\n  };\n  const revealTile = tile => {\n    if (firstClick) {\n      handleFirstClick();\n    }\n    let newGrid = [...grid];\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!');\n      newGrid[tile.x][tile.y].status = 'mine_exploded';\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open';\n      if (tile.adjacentMines < 1) {\n        revealAdjacentHiddenTiles(tile);\n      }\n    }\n    setGrid(newGrid);\n    if (checkForWin()) {\n      gameOver(newGrid, 'Congratulations!');\n    }\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag';\n        setMinesLeftText(prev => prev - 1);\n        break;\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden';\n        setMinesLeftText(prev => prev + 1);\n        break;\n      default:\n        break;\n    }\n    setGrid(newGrid);\n  };\n  const initializeGrid = () => {\n    setTimerOn(false);\n    setTime(0);\n    setFirstClick(true);\n    setGameOverText('');\n    setMinesLeftText(mineCount);\n    const newGrid = generateGrid(width, height);\n    addMinesToGrid(newGrid, mineCount);\n    addAdjacentMineNumbers(newGrid, width);\n    setGrid(newGrid);\n    const board = document.querySelector('.board');\n    if (board) {\n      board.style.setProperty('--boardWidth', width);\n    }\n  };\n  const saveScore = event => {\n    event.preventDefault();\n\n    // switch(difficulty){\n    //   case 'BEGINNER':\n    //     scoreService.createBeginner({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'INTERMEDIATE':\n    //     scoreService.createIntermediate({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log('Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'EXTREME':\n    //     scoreService.createExtreme({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   default:\n    //     break\n    // }\n\n    setGameOverText('');\n    event.target.username.value = '';\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5 mb-3 text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DifficultyBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/beginner\",\n        element: /*#__PURE__*/_jsxDEV(Beginner, {\n          initializeGrid: initializeGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 20\n        }, this),\n        loader: () => {\n          setWidth(9);\n          setHeight(9);\n          setMineCount(10);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/intermediate\",\n        element: /*#__PURE__*/_jsxDEV(Intermediate, {\n          initializeGrid: initializeGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        time: time,\n        minesLeft: minesLeftText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameOverBox, {\n        text: gameOverText,\n        functions: [initializeGrid, saveScore]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        functions: [revealTile, flagTile, checkFlagsAndRevealAdjacentTiles]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"Wfo89Mn2y/HNIt3BJv9QJ0bfMMg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","DifficultyBar","Beginner","Intermediate","Grid","Timer","GameOverBox","Route","Routes","jsxDEV","_jsxDEV","Fragment","_Fragment","getXYfromIndex","index","width","x","y","parseInt","randInt","min","max","Math","floor","random","getAdjacentTiles","grid","tile","neighbors","xOff","yOff","_grid","neighbor","push","addAdjacentMineNumbers","row","j","length","isMine","adjacentMines","addMinesToGrid","mineCount","gridlen","console","log","mineIndexes","randomNumber","includes","idx","generateGrid","wid","hgt","newGrid","id","status","disabled","App","_s","firstClick","setFirstClick","height","setHeight","setWidth","setMineCount","setGrid","gameOverText","setGameOverText","time","setTime","timerOn","setTimerOn","minesLeftText","setMinesLeftText","initializeGrid","interval","setInterval","prevTime","clearInterval","checkForWin","tileIsOpened","gameOver","editableGrid","text","forEach","revealAdjacentHiddenTiles","revealTile","checkFlagsAndRevealAdjacentTiles","neighbouringFlags","handleFirstClick","flagTile","prev","board","document","querySelector","style","setProperty","saveScore","event","preventDefault","target","username","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","element","loader","minesLeft","functions","_c","$RefreshReg$"],"sources":["/home/ville/minesweeper/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect  } from 'react'\n// import scoreService from './services/scores'\nimport DifficultyBar from './components/DifficultyBar.js'\nimport Beginner from './components/Beginner.js'\nimport Intermediate from './components/Intermediate.js'\nimport Grid from './components/grid.js'\nimport Timer from './components/timer.js'\nimport GameOverBox from './components/GameOverBox.js'\n\nimport { Route, Routes } from 'react-router-dom'\nimport './styles.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst getXYfromIndex = (index, width) => {\n  const x = index%width\n  const y = parseInt(index/width)\n  return { x, y }\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nconst getAdjacentTiles = (grid, tile)  => {\n  const neighbors = []\n  for (let xOff = -1; xOff < 2; ++xOff){\n    for (let yOff = -1; yOff < 2; ++yOff){\n      const neighbor = grid[tile.x + xOff]?.[tile.y + yOff]\n      if (neighbor) neighbors.push(neighbor)\n    } \n  }\n  return neighbors\n}\nconst addAdjacentMineNumbers = (grid) => {\n  for ( const row of grid ) {\n    for ( const tile of row ) {\n      const neighbors = getAdjacentTiles(grid, tile)\n      for (let j = 0; j<neighbors.length; ++j) {\n        if (neighbors[j].isMine) tile.adjacentMines++\n      }\n    }\n  }\n}\nconst addMinesToGrid = (grid, mineCount) => {\n  const gridlen = grid.length * grid[0].length\n  if ( mineCount > gridlen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridlen)\n\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  for (const idx of mineIndexes) {\n    const {x, y} = getXYfromIndex(idx, grid.length)\n    grid[x][y].isMine = true\n  }\n}\nconst generateGrid = (wid, hgt) => {\n  let newGrid = []\n  for (let x = 0; x < hgt; ++x){\n    const row = []\n    for (let y = 0; y < wid; ++y) {\n      const idx = y + wid*x\n      const tile = {\n        id: `${x}_${y}`,\n        idx,\n        x,\n        y,\n        status: 'hidden',\n        disabled: false,\n        adjacentMines: 0,\n        isMine: false,\n      }\n      row.push(tile)\n    }\n    newGrid.push(row)\n  }\n  return newGrid\n}\n\nfunction App() {\n  const [firstClick, setFirstClick] = useState(true)\n  const [height, setHeight] = useState(9)\n  const [width, setWidth] = useState(9)\n  const [mineCount, setMineCount] = useState(10)\n  const [grid, setGrid] = useState([[]])\n  const [gameOverText, setGameOverText] = useState('')\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimerOn] = useState(0)\n  const [minesLeftText, setMinesLeftText] = useState(mineCount)\n\n  // eslint-disable-next-line\n  useEffect(() => initializeGrid(), [])  \n\n  useEffect(() => {\n    let interval = null\n    \n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval) // Memory leak preventation?\n  }, [timerOn])\n\n  // Game does not continue if:\n  // 1. A tile has a mine, and it's unopened\n  // 2. A tile does NOT have a mine and it's unopened\n  const checkForWin = () => {\n    for (const row of grid){\n      for (const tile of row) {\n        const tileIsOpened = tile.status.includes('open') || tile.status.includes('mine')\n      \n        if (tile.isMine && tileIsOpened) return false\n        if (!tile.isMine && !tileIsOpened) return false\n      }\n    }\n    return true\n  }\n  // Call when game is lost (or won!)\n  // 1. Mark wrong flags as wrong\n  // 2. Reveal all mines (keep flagged mines as flags)\n  // 3. Disable all tiles\n  const gameOver = (editableGrid, text) => {\n    setTimerOn(false)\n    editableGrid.forEach((row) => {\n      row.forEach( (tile) => {\n        if ( !tile.isMine && tile.status === 'flag') {\n          tile.status = 'flag_incorrect'\n        }\n        if ( tile.isMine && tile.status !== 'flag') {\n          tile.status = 'mine'\n        }\n        \n        tile.disabled = true\n      })\n    })\n    setGameOverText(text)\n  }\n  const revealAdjacentHiddenTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n\n    neighbors.forEach(tile => {\n      if (tile.status === 'hidden') revealTile(tile)\n    })\n  }\n  // If an open tile is clicked, and all it's surrounding\n  // mines have been flagged, reveal all remaining tiles.\n  // However, if you place the correct number of flags on\n  // the wrong squares, this will explode the mines.\n  const checkFlagsAndRevealAdjacentTiles = (tile) => {\n    const neighbors = getAdjacentTiles(grid, tile)\n    let neighbouringFlags = 0\n    \n    neighbors.forEach(tile => {\n      if (tile.status === 'flag') neighbouringFlags++\n    })\n\n    if (neighbouringFlags === tile.adjacentMines){\n      revealAdjacentHiddenTiles(tile)\n    }\n  }\n  const handleFirstClick = () => {\n    setFirstClick(false)\n    setTimerOn(true)\n  }\n  const revealTile = (tile) => {\n    if (firstClick) {\n      handleFirstClick()\n    }\n\n    let newGrid = [...grid]\n    if (tile.isMine) {\n      // End game\n      gameOver(newGrid, 'Game over!')\n      newGrid[tile.x][tile.y].status = 'mine_exploded'\n    } else {\n      // reveal number / empty\n      newGrid[tile.x][tile.y].status = 'open'\n      if (tile.adjacentMines < 1) {\n        revealAdjacentHiddenTiles(tile)\n      }\n    }\n\n    setGrid(newGrid)\n    if (checkForWin()){\n      gameOver(newGrid, 'Congratulations!')\n    }\n  }\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.x][tile.y].status = 'flag'\n        setMinesLeftText(prev => prev - 1)\n        break\n      case 'flag':\n        newGrid[tile.x][tile.y].status = 'hidden'\n        setMinesLeftText(prev => prev + 1)\n        break\n      default:\n        break\n    }\n    setGrid(newGrid)\n  }\n\n  const initializeGrid = () => {\n    setTimerOn(false)\n    setTime(0)\n    setFirstClick(true)\n    setGameOverText('')\n    setMinesLeftText(mineCount)\n    const newGrid = generateGrid(width, height)\n    addMinesToGrid(newGrid, mineCount)\n    addAdjacentMineNumbers(newGrid, width)\n    setGrid(newGrid)\n\n    const board = document.querySelector('.board')\n    if (board) {\n      board.style.setProperty('--boardWidth', width)\n    }\n  }\n  \n  const saveScore = ( event ) => {\n    event.preventDefault()\n\n    // switch(difficulty){\n    //   case 'BEGINNER':\n    //     scoreService.createBeginner({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'INTERMEDIATE':\n    //     scoreService.createIntermediate({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log('Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   case 'EXTREME':\n    //     scoreService.createExtreme({\n    //       \"username\": event.target.username.value,\n    //       \"time\": time\n    //     }).then(returnedScore => {\n    //       console.log(returnedScore, ': Score saved succesfully!')\n    //     })\n    //     .catch(error => {\n    //       console.log(\n    //         error.response ?\n    //           error.response.data.error :\n    //           'Unidentified error occured, error:', error, true\n    //       )\n    //     })\n    //     break\n    //   default:\n    //     break\n    // }\n\n    setGameOverText('')\n    event.target.username.value = ''\n  }\n\n  return (\n    <>\n      <div className=\"row mt-5 mb-3 text-center\">\n        <h1>Miinaharava</h1>\n      </div>\n      <DifficultyBar />\n      <Routes>\n        \n        <Route \n          path='/beginner'\n          element={<Beginner initializeGrid={initializeGrid}/>}\n          loader={\n            () => {\n              setWidth(9)\n              setHeight(9)\n              setMineCount(10)\n            }\n          }></Route>\n          \n        <Route path='/intermediate' element={<Intermediate initializeGrid={initializeGrid}/>\n        }></Route>\n        {/* \n        <Route path='/extreme' element={<Game diff='extreme' />}></Route>\n        <Route path='/custom' element={<Game diff='custom' />}></Route> */}\n      </Routes>\n      <div className=\"body\">\n        <Timer time={time} minesLeft={minesLeftText} />\n\n        <GameOverBox\n          text={gameOverText}\n          functions={[\n            initializeGrid,\n            saveScore\n          ]} />\n        <Grid\n          grid={grid}\n          functions={\n            [ revealTile,\n              flagTile,\n              checkFlagsAndRevealAdjacentTiles ]}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}