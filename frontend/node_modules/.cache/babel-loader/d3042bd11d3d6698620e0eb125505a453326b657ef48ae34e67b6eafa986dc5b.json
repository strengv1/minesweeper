{"ast":null,"code":"var _jsxFileName = \"/home/ville/miinaharava/src/App.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport { useState } from 'react';\nimport Tile from './components/tile.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  grid,\n  width,\n  revealTile,\n  flagTile\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"grid\",\n  style: {\n    gridTemplateColumns: `repeat(${width}, auto)`\n  },\n  children: grid.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n    revealTile: revealTile,\n    flagTile: flagTile,\n    tile: tile\n  }, tile.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = Grid;\nconst generateGrid = (width, height) => {\n  let newGrid = [];\n  for (let i = 0; i < height; ++i) {\n    for (let j = 0; j < width; ++j) {\n      const tile = {\n        id: `${i}_${j}`,\n        idx: j + width * i,\n        x: j,\n        y: i,\n        status: 'hidden'\n      };\n      newGrid.push(tile);\n    }\n  }\n  return newGrid;\n};\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n// Returns a boolean array with length of gridLen, with 'mineCount' amount of trues \nconst generateMineField = (mineCount, gridLen) => {\n  if (mineCount > gridLen) {\n    console.log('Too many mines!');\n    return -1;\n  }\n  let newMineField = new Array(gridLen).fill(false);\n  let mineIndexes = [];\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen);\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber);\n    }\n  }\n  mineIndexes.forEach(idx => newMineField[idx] = true);\n  return newMineField;\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [mineField, setMineField] = useState([]);\n  const [width, setWidth] = useState(4);\n  const [height, setHeight] = useState(5);\n  const [mineCount /*, setMineCount*/] = useState(3);\n  const [gameOverText, setGameOverText] = useState('');\n  const createEmptyGrid = () => {\n    setGameOverText('');\n    const newGrid = generateGrid(width, height);\n    setGrid(newGrid);\n    const newMineField = generateMineField(mineCount, width * height);\n    setMineField(newMineField);\n  };\n  const flagTile = tile => {\n    let newGrid = [...grid];\n    switch (tile.status) {\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag';\n        setGrid(newGrid);\n        break;\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden';\n        setGrid(newGrid);\n        break;\n      default:\n        break;\n    }\n  };\n  const checkForWin = () => {\n    grid.forEach(tile => {\n      const isHiddenOrFlagged = tile.status.includes('flag') || tile.status.includes('hidden');\n      const tileHasMine = mineField[tile.idx];\n      if (tile.status.includes('mine')) {\n        console.log('Shouldnt happen');\n        return false;\n      } else if (!tileHasMine && isHiddenOrFlagged) {\n        console.log('not opened');\n        return false;\n      } else if (tileHasMine && isHiddenOrFlagged) {\n        console.log('Found a mine!');\n      } else if (tile.status.includes('open')) {\n        console.log('nothing to see');\n      } else {\n        console.log('');\n      }\n    });\n  };\n  const gameOver = editableGrid => {\n    editableGrid.forEach(tile => {\n      if (tile.status.includes('disabled')) return;\n      if (mineField[tile.idx]) {\n        if (tile.status === 'flag') {\n          tile.status = 'correct';\n        } else {\n          tile.status = 'mine';\n        }\n      }\n      switch (tile.status) {\n        case 'hidden':\n          tile.status = 'hidden';\n          break;\n        case 'flag':\n          break;\n        default:\n          break;\n      }\n      tile.status = tile.status + ' disabled';\n    });\n    setGameOverText('Game Over!');\n  };\n  const revealTile = tile => {\n    let newGrid = [...grid];\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid);\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open';\n      setGrid(newGrid);\n    }\n    checkForWin();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Miinaharava\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: e => setWidth(e.target.value),\n        type: \"text\",\n        id: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: height,\n        onChange: e => setHeight(e.target.value),\n        type: \"text\",\n        id: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          createEmptyGrid();\n        },\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverText\",\n        children: gameOverText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        width: width,\n        revealTile: revealTile,\n        flagTile: flagTile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"LSgtm5GpeLar1NQ+0tpf/mWfzHI=\");\n_c2 = App;\nexport default App;\n\n// const handleClick = (e) => {\n//   e.preventDefault()\n\n//   const checkForMine = () => {\n//     if (mineField[idx]) {\n//       //end game\n//       classList.add('mine')\n//     } else {\n//       // reveal number / empty\n//       classList.add('open')\n//     }\n//   }\n//   var square = e.target\n//   var classList = square.classList\n//   var idx = indexFromId(square.id, width)\n//   switch (true){\n//     // LEFT CLICK:\n//     case ((e.type === 'click') && classList.contains('hidden')):\n//       classList.remove('hidden')\n//       checkForMine()\n//       break\n//     // RIGHT CLICK:\n//     case ((e.type === 'contextmenu') && classList.contains('hidden')):\n//       classList.remove('hidden')\n//       classList.add('flag')\n//       break\n//     case ((e.type ==='contextmenu') && classList.contains('flag')):\n//       classList.remove('flag')\n//       classList.add('hidden')  \n//       break\n//     default:\n//       break\n//   }\n\n// }\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","Tile","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","grid","width","revealTile","flagTile","className","style","gridTemplateColumns","children","map","tile","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","generateGrid","height","newGrid","i","j","idx","x","y","status","push","randInt","min","max","Math","floor","random","generateMineField","mineCount","gridLen","console","log","newMineField","Array","fill","mineIndexes","length","randomNumber","includes","forEach","App","_s","setGrid","mineField","setMineField","setWidth","setHeight","gameOverText","setGameOverText","createEmptyGrid","checkForWin","isHiddenOrFlagged","tileHasMine","gameOver","editableGrid","htmlFor","value","onChange","e","target","type","onClick","_c2","$RefreshReg$"],"sources":["/home/ville/miinaharava/src/App.js"],"sourcesContent":["import './styles.css'\nimport { useState  } from 'react'\nimport Tile from './components/tile.js'\n\nconst Grid = ({ grid, width, revealTile, flagTile }) => (\n  <div className=\"grid\" style={{gridTemplateColumns: `repeat(${width}, auto)`}}>\n    {grid.map( tile =>\n      <Tile \n        key={tile.id}\n        revealTile={ revealTile }\n        flagTile={flagTile}\n        tile={tile} />\n    )}\n  </div>\n)\n\nconst generateGrid = (width, height) => {\n  let newGrid = []\n\n  for (let i = 0; i < height; ++i){\n    for (let j = 0; j < width; ++j) {\n      const tile = {\n        id: `${i}_${j}`,\n        idx: j + width*i,\n        x: j,\n        y: i,\n        status: 'hidden'\n      }\n      newGrid.push(tile)\n    }\n  }\n  return newGrid\n}\nconst randInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n// Returns a boolean array with length of gridLen, with 'mineCount' amount of trues \nconst generateMineField = (mineCount, gridLen) => {\n  if ( mineCount > gridLen ) {\n    console.log('Too many mines!')\n    return -1\n  }\n  let newMineField = new Array(gridLen).fill(false)\n  let mineIndexes = []\n  while (mineIndexes.length < mineCount) {\n    const randomNumber = randInt(0, gridLen)\n    if (!mineIndexes.includes(randomNumber)) {\n      mineIndexes.push(randomNumber)\n    }\n  }\n  mineIndexes.forEach((idx) => newMineField[idx] = true)\n  return newMineField\n}\n\nfunction App() {\n  const [grid, setGrid] = useState([])\n  const [mineField, setMineField] = useState([])\n  const [width, setWidth] = useState(4)\n  const [height, setHeight] = useState(5)\n  const [mineCount/*, setMineCount*/] = useState(3)\n  const [gameOverText, setGameOverText] = useState('') \n\n  const createEmptyGrid = () => {\n    setGameOverText('')\n    const newGrid = generateGrid(width, height)\n    setGrid(newGrid)\n    \n    const newMineField = generateMineField(mineCount, width*height)\n    setMineField(newMineField)\n  }\n\n  const flagTile = (tile) => {\n    let newGrid = [...grid]\n    switch (tile.status){\n      case 'hidden':\n        newGrid[tile.idx].status = 'flag'\n        setGrid(newGrid)\n        break\n\n      case 'flag':\n        newGrid[tile.idx].status = 'hidden'\n        setGrid(newGrid)\n        break\n      default:\n        break\n    }\n    \n  }\n  const checkForWin = () => {\n\n    grid.forEach((tile) => {\n      const isHiddenOrFlagged = (tile.status.includes('flag') || tile.status.includes('hidden'))\n      const tileHasMine = mineField[tile.idx]\n      \n      if ( tile.status.includes('mine') ){\n        console.log('Shouldnt happen')\n        return false\n      } else if ( !tileHasMine && isHiddenOrFlagged) {\n        console.log('not opened')\n        return false\n      } else if ( tileHasMine && isHiddenOrFlagged ) {\n        console.log('Found a mine!')\n      } else if ( tile.status.includes('open') ) {\n        console.log('nothing to see')\n      } else {\n        console.log('')\n      }\n    })\n\n  }\n\n  const gameOver = editableGrid => {\n    editableGrid.forEach( (tile) => {\n      if (tile.status.includes('disabled') ) return\n\n      if ( mineField[tile.idx] ) {\n        if (tile.status === 'flag') {\n          tile.status = 'correct'\n        } else {\n          tile.status = 'mine'   \n        }     \n      }\n\n      switch (tile.status){\n        case 'hidden':\n          tile.status = 'hidden'\n          break\n        case 'flag':\n          break\n        default:\n          break\n      }\n      tile.status = tile.status + ' disabled'\n    })\n    setGameOverText('Game Over!')\n  }\n\n  const revealTile = (tile) => {\n    let newGrid = [...grid]\n    if (mineField[tile.idx]) {\n      // End game\n      gameOver(newGrid)\n    } else {\n      // reveal number / empty\n      newGrid[tile.idx].status = 'open'\n      setGrid(newGrid)\n    }\n\n    checkForWin()\n  }\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Miinaharava</h1>\n        <label htmlFor=\"width\">width</label>\n        <input\n          value={width}\n          onChange={e => setWidth(e.target.value)}\n          type=\"text\"\n          id=\"width\"\n        />\n        <label htmlFor=\"height\">height</label>\n        <input\n          value={height}\n          onChange={e => setHeight(e.target.value)}\n          type=\"text\"\n          id=\"height\"/>\n        <button\n          onClick={(e) => {createEmptyGrid()}}\n          > New Game </button>\n      </div>\n      <div className=\"body\">\n        <div className=\"gameOverText\">\n          {gameOverText}\n        </div>\n        <Grid \n            grid={grid} \n            width={width} \n            revealTile={revealTile}\n            flagTile={flagTile}\n          />\n      </div>\n\n      \n\n    </>\n  );\n}\n\nexport default App;\n\n\n\n\n\n  // const handleClick = (e) => {\n  //   e.preventDefault()\n    \n  //   const checkForMine = () => {\n  //     if (mineField[idx]) {\n  //       //end game\n  //       classList.add('mine')\n  //     } else {\n  //       // reveal number / empty\n  //       classList.add('open')\n  //     }\n  //   }\n  //   var square = e.target\n  //   var classList = square.classList\n  //   var idx = indexFromId(square.id, width)\n  //   switch (true){\n  //     // LEFT CLICK:\n  //     case ((e.type === 'click') && classList.contains('hidden')):\n  //       classList.remove('hidden')\n  //       checkForMine()\n  //       break\n  //     // RIGHT CLICK:\n  //     case ((e.type === 'contextmenu') && classList.contains('hidden')):\n  //       classList.remove('hidden')\n  //       classList.add('flag')\n  //       break\n  //     case ((e.type ==='contextmenu') && classList.contains('flag')):\n  //       classList.remove('flag')\n  //       classList.add('hidden')  \n  //       break\n  //     default:\n  //       break\n  //   }\n  \n  // }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}